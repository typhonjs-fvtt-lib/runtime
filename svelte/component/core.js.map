{"version":3,"file":"core.js","sources":["../../node_modules/@typhonjs-fvtt/svelte/src/component/core/TJSContainer.svelte","../../node_modules/@typhonjs-fvtt/svelte/src/component/core/TJSComponentShell.svelte","../../node_modules/@typhonjs-fvtt/svelte/src/component/core/TJSGlassPane.svelte","../../node_modules/@typhonjs-fvtt/svelte/src/component/core/application/TJSHeaderButton.svelte","../../node_modules/@typhonjs-fvtt/svelte/src/component/core/application/TJSApplicationHeader.svelte","../../node_modules/@typhonjs-fvtt/svelte/src/component/core/application/ResizableHandle.svelte","../../node_modules/@typhonjs-fvtt/svelte/src/component/core/application/ApplicationShell.svelte","../../node_modules/@typhonjs-fvtt/svelte/src/component/core/application/TJSApplicationShell.svelte","../../node_modules/@typhonjs-fvtt/svelte/src/component/core/contextmenu/TJSContextMenu.svelte","../../node_modules/@typhonjs-fvtt/svelte/src/component/core/dialog/DialogContent.svelte","../../node_modules/@typhonjs-fvtt/svelte/src/component/core/dialog/DialogShell.svelte"],"sourcesContent":["<script>\n   export let warn = false;\n   export let children = void 0;\n</script>\n\n<svelte:options accessors={true}/>\n\n{#if Array.isArray(children)}\n    {#each children as child}\n        <svelte:component this={child.class} {...child.props} />\n    {/each}\n{:else if warn}\n    <p>Container warning: No children.</p>\n{/if}\n\n<style>\n    p {\n        color: red;\n        font-size: 18px;\n    }\n</style>","<script>\n   import { getContext }    from 'svelte';\n\n   import TJSContainer      from './TJSContainer.svelte';\n\n   // The children array can be specified by a parent via prop or is read below from the external context.\n   export let children = void 0\n\n   const context = getContext('external');\n\n   // This component can host multiple children defined via props or in the TyphonJS SvelteData configuration object\n   // that are potentially mounted in the content area. If no children defined then this component mounts any slotted\n   // child.\n   const allChildren = Array.isArray(children) ? children :\n    typeof context === 'object' ? context.children : void 0;\n</script>\n\n<svelte:options accessors={true}/>\n\n<TJSContainer children={allChildren} warn={true} />","<script>\n   import {\n      s_DEFAULT_TRANSITION,\n      s_DEFAULT_TRANSITION_OPTIONS }   from '@typhonjs-fvtt/svelte/transition';\n\n   export let id = void 0;\n   export let zIndex = Number.MAX_SAFE_INTEGER;\n   export let background = '#50505080';\n   export let captureInput = true;\n   export let preventDefault = true;\n   export let stopPropagation = true;\n\n   let glassPane;\n\n   $: if (glassPane)\n   {\n      glassPane.style.maxWidth = '100%';\n      glassPane.style.maxHeight = '100%';\n      glassPane.style.width = '100%';\n      glassPane.style.height = '100%';\n   }\n\n   $: if (glassPane)\n   {\n      if (captureInput) { glassPane.focus(); }\n      glassPane.style.pointerEvents = captureInput ? 'auto' : 'none';\n   }\n\n   $: if (glassPane) { glassPane.style.background = background; }\n   $: if (glassPane) { glassPane.style.zIndex = zIndex; }\n\n   // ---------------------------------------------------------------------------------------------------------------\n\n   // The following block is somewhat complex, but allows transition options to be updated reactively during\n   // runtime execution.\n\n   // Exports properties to set a transition w/ in / out options.\n   export let transition = void 0;\n   export let inTransition = s_DEFAULT_TRANSITION;\n   export let outTransition = s_DEFAULT_TRANSITION;\n\n   // Exports properties to set options for any transitions.\n   export let transitionOptions = void 0;\n   export let inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS;\n   export let outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS;\n\n   // Tracks last transition state.\n   let oldTransition = void 0;\n   let oldTransitionOptions = void 0\n\n   // Run this reactive block when the last transition state is not equal to the current state.\n   $: if (oldTransition !== transition)\n   {\n      // If transition is defined and not the default transition then set it to both in and out transition otherwise\n      // set the default transition to both in & out transitions.\n      const newTransition = s_DEFAULT_TRANSITION !== transition && typeof transition === 'function' ? transition :\n       s_DEFAULT_TRANSITION;\n\n      inTransition = newTransition;\n      outTransition = newTransition;\n\n      oldTransition = newTransition;\n   }\n\n   // Run this reactive block when the last transition options state is not equal to the current options state.\n   $: if (oldTransitionOptions !== transitionOptions)\n   {\n      const newOptions = transitionOptions !== s_DEFAULT_TRANSITION_OPTIONS && typeof transitionOptions === 'object' ?\n       transitionOptions : s_DEFAULT_TRANSITION_OPTIONS;\n\n      inTransitionOptions = newOptions;\n      outTransitionOptions = newOptions;\n\n      oldTransitionOptions = newOptions;\n   }\n\n   // Handle cases if inTransition is unset; assign noop default transition function.\n   $: if (typeof inTransition !== 'function') { inTransition = s_DEFAULT_TRANSITION; }\n\n   // Handle cases if outTransition is unset; assign noop default transition function.\n   $: if (typeof outTransition !== 'function') { outTransition = s_DEFAULT_TRANSITION; }\n\n   // Handle cases if inTransitionOptions is unset; assign empty default transition options.\n   $: if (typeof inTransitionOptions !== 'object') { inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\n\n   // Handle cases if outTransitionOptions is unset; assign empty default transition options.\n   $: if (typeof outTransitionOptions !== 'object') { outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\n\n   // ---------------------------------------------------------------------------------------------------------------\n\n   function swallow(event)\n   {\n      if (captureInput)\n      {\n         if (preventDefault) { event.preventDefault(); }\n         if (stopPropagation) { event.stopPropagation(); }\n      }\n   }\n</script>\n\n<svelte:options accessors={true}/>\n\n<div id={id}\n     bind:this={glassPane}\n     tabindex=0\n     class=tjs-glass-pane\n     in:inTransition={inTransitionOptions}\n     out:outTransition={outTransitionOptions}\n     on:keydown={swallow}>\n   <slot />\n</div>\n\n<style>\n   .tjs-glass-pane {\n      position: absolute;\n      overflow: inherit;\n   }\n</style>","<script>\n   /**\n    * Provides an app header button conforming to the Foundry {@link ApplicationHeaderButton} type. Additionally a\n    * `title` field is supported to give a tool tip for the button. The `onclick` function if defined is invoked when\n    * the button is clicked and state is updated accordingly.\n    */\n   import { localize }  from '@typhonjs-fvtt/svelte/helper';\n\n   export let button;\n\n   function onClick()\n   {\n      if (typeof button.onclick === 'function')\n      {\n         button.onclick.call(button);\n         button = button;\n      }\n   }\n</script>\n\n<svelte:options accessors={true}/>\n\n<a on:click={onClick} class=\"header-button {button.class}\">\n    <i class={button.icon} title={localize(button.title)}></i>{localize(button.label)}\n</a>\n","<script>\n   import { getContext }   from 'svelte';\n\n   import { draggable }    from '@typhonjs-fvtt/svelte/action';\n   import { localize }     from '@typhonjs-fvtt/svelte/helper';\n\n   import TJSHeaderButton  from './TJSHeaderButton.svelte';\n\n   const context = getContext('external');\n   const foundryApp = context.foundryApp;\n\n   const bringToTop = () =>\n   {\n      if (typeof foundryApp.options.popOut === 'boolean' && foundryApp.options.popOut)\n      {\n         foundryApp.bringToTop.call(foundryApp);\n      }\n   }\n\n   const storeTitle = context.storeAppOptions.title;\n   const storeDraggable = context.storeAppOptions.draggable;\n   const storeHeaderButtons = context.storeUIOptions.headerButtons;\n   const storeMinimizable = context.storeAppOptions.minimizable;\n\n   function minimizable(node, booleanStore)\n   {\n      const callback = foundryApp._onToggleMinimize.bind(foundryApp);\n\n      function activateListeners() { node.addEventListener('dblclick', callback); }\n      function removeListeners() { node.removeEventListener('dblclick', callback); }\n\n      if (booleanStore) { activateListeners(); }\n\n      return {\n         update: (booleanStore) =>  // eslint-disable-line no-shadow\n         {\n            if (booleanStore) { activateListeners(); }\n            else { removeListeners(); }\n         },\n\n         destroy: () => removeListeners()\n      };\n   }\n</script>\n\n<header class=\"window-header flexrow\"\n        on:pointerdown={bringToTop}\n        use:draggable={{ positionable: foundryApp, booleanStore: $storeDraggable }}\n        use:minimizable={$storeMinimizable}>\n    <h4 class=window-title>{localize($storeTitle)}</h4>\n    {#each $storeHeaderButtons as button}\n        <TJSHeaderButton {button}/>\n    {/each}\n</header>\n","<script>\n   import { getContext } from 'svelte';\n\n   export let isResizable = false;\n\n   const context = getContext('external');\n\n   // Allows retrieval of the element root at runtime.\n   const getElementRoot = getContext('getElementRoot');\n\n   const foundryApp = context.foundryApp;\n   const storeResizable = context.storeAppOptions.resizable;\n   const storeMinimized = context.storeUIOptions.minimized;\n\n   let elementResize;\n\n   $: if (elementResize)\n   {\n      // Instead of creating a derived store it is easier to use isResizable and the minimized store below.\n      elementResize.style.display = isResizable && !$storeMinimized ? 'block' : 'none';\n\n      // Add / remove `resizable` class from element root.\n      const elementRoot = getElementRoot();\n      if (elementRoot) { elementRoot.classList[isResizable ? 'add' : 'remove']('resizable'); }\n   }\n\n   /**\n    * Provides an action to handle resizing the application shell based on the resizable app option.\n    *\n    * @param {HTMLElement}       node - The node associated with the action.\n    *\n    * @param {Readable<boolean>} booleanStore - A Svelte store that contains a boolean.\n    *\n    * @returns {{update: Function, destroy: Function}} The action lifecycle methods.\n    */\n   function resizable(node, booleanStore)\n   {\n      /**\n       * Duplicate the app / Positionable starting position to track differences.\n       *\n       * @type {object}\n       */\n      let position = null;\n\n      /**\n       * Stores the initial X / Y on drag down.\n       *\n       * @type {object}\n       */\n      let initialPosition = {};\n\n      /**\n       * Throttle mousemove event handling to 60fps\n       *\n       * @type {number}\n       */\n      let moveTime = 0;\n\n      /**\n       * Stores the active state and is used to cut off any active resizing when the store value changes.\n       *\n       * @type {boolean}\n       */\n      let active = booleanStore;\n\n      /**\n       * Remember event handlers associated with this action so they may be later unregistered.\n       *\n       * @type {Object}\n       */\n      const handlers = {\n         resizeDown: ['pointerdown', (e) => onResizePointerDown(e), false],\n         resizeMove: ['pointermove', (e) => onResizePointerMove(e), false],\n         resizeUp: ['pointerup', (e) => onResizePointerUp(e), false]\n      };\n\n      /**\n       * Activates listeners.\n       */\n      function activateListeners()\n      {\n         active = true;\n\n         // Resize handlers\n         node.addEventListener(...handlers.resizeDown);\n\n         isResizable = true;\n\n         node.style.display = 'block';\n      }\n\n      /**\n       * Removes listeners.\n       */\n      function removeListeners()\n      {\n         active = false;\n\n         // Resize handlers\n         node.removeEventListener(...handlers.resizeDown);\n         node.removeEventListener(...handlers.resizeMove);\n         node.removeEventListener(...handlers.resizeUp);\n\n         node.style.display = 'none';\n\n         isResizable = false;\n      }\n\n      // On mount if resizable is true then activate listeners otherwise set element display to `none`.\n      if (active)\n      {\n         activateListeners();\n      }\n      else\n      {\n         node.style.display = 'none';\n      }\n\n      /**\n       * Handle the initial mouse click which activates dragging behavior for the application\n       * @private\n       */\n      function onResizePointerDown(event)\n      {\n         event.preventDefault();\n\n         // Limit dragging to 60 updates per second\n         const now = Date.now();\n\n         if ((now - moveTime) < (1000 / 60)) { return; }\n\n         moveTime = now;\n\n         // Record initial position\n         position = foundry.utils.duplicate(foundryApp.position);\n\n         if (position.height === 'auto') { position.height = getElementRoot().clientHeight; }\n         if (position.width === 'auto') { position.width = getElementRoot().clientWidth; }\n\n         initialPosition = { x: event.clientX, y: event.clientY };\n\n         // Add temporary handlers\n         globalThis.addEventListener(...handlers.resizeMove);\n         globalThis.addEventListener(...handlers.resizeUp);\n      }\n\n      /**\n       * Move the window with the mouse, bounding the movement to ensure the window stays within bounds of the viewport\n       * @private\n       */\n      function onResizePointerMove(event)\n      {\n         event.preventDefault();\n\n         if (!active) { return; }\n\n         foundryApp.setPosition({\n            width: position.width + (event.clientX - initialPosition.x),\n            height: position.height + (event.clientY - initialPosition.y)\n         });\n      }\n\n      /**\n       * Conclude the dragging behavior when the mouse is release, setting the final position and removing listeners\n       * @private\n       */\n      function onResizePointerUp(event)\n      {\n         event.preventDefault();\n\n         globalThis.removeEventListener(...handlers.resizeMove);\n         globalThis.removeEventListener(...handlers.resizeUp);\n\n         foundryApp._onResize(event);\n      }\n\n\n      return {\n         update: (booleanStore) =>  // eslint-disable-line no-shadow\n         {\n            if (booleanStore) { activateListeners(); }\n            else { removeListeners(); }\n         },\n\n         destroy: () => removeListeners()\n      };\n   }\n\n</script>\n\n<div class=\"window-resizable-handle\"\n     use:resizable={$storeResizable}\n     bind:this={elementResize}>\n   <i class=\"fas fa-arrows-alt-h\"></i>\n</div>\n","<script>\n   import { getContext, setContext }   from 'svelte';\n\n   import TJSApplicationHeader         from './TJSApplicationHeader.svelte';\n   import TJSContainer                 from '../TJSContainer.svelte';\n   import ResizableHandle              from './ResizableHandle.svelte';\n\n   import {\n      s_DEFAULT_TRANSITION,\n      s_DEFAULT_TRANSITION_OPTIONS }   from '@typhonjs-fvtt/svelte/transition';\n\n   // Bound to the content and root elements. Can be used by parent components. SvelteApplication will also\n   // use 'elementRoot' to set the element of the Application. You can also provide `elementContent` and\n   // `elementTarget`. Please see SvelteApplication lifecycle documentation.\n   export let elementContent;\n   export let elementRoot;\n\n   // The children array can be specified by a parent via prop or is read below from the external context.\n   export let children = void 0\n\n   // If a parent component binds and sets `heightChanged` to true then it is bound to the content & root element\n   // `clientHeight`.\n   export let heightChanged = false;\n\n   // Store the initial `heightChanged` state. If it is truthy then `clientHeight` for the content & root elements\n   // are bound to `heightChanged` to signal to any parent component of any change to the client & root.\n   const bindHeightChanged = !!heightChanged;\n\n   setContext('getElementContent', () => elementContent);\n   setContext('getElementRoot', () => elementRoot);\n\n   const context = getContext('external');\n\n   // Store Foundry Application reference.\n   const foundryApp = context.foundryApp;\n\n   // This component can host multiple children defined via props or in the TyphonJS SvelteData configuration object\n   // that are potentially mounted in the content area. If no children defined then this component mounts any slotted\n   // child.\n   const allChildren = Array.isArray(children) ? children :\n    typeof context === 'object' ? context.children : void 0;\n\n   // ---------------------------------------------------------------------------------------------------------------\n\n   // The following block is somewhat complex, but allows transition options to be updated reactively during\n   // runtime execution.\n\n   // Exports properties to set a transition w/ in / out options.\n   export let transition = void 0;\n   export let inTransition = s_DEFAULT_TRANSITION;\n   export let outTransition = s_DEFAULT_TRANSITION;\n\n   // Exports properties to set options for any transitions.\n   export let transitionOptions = void 0;\n   export let inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS;\n   export let outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS;\n\n   // Tracks last transition state.\n   let oldTransition = void 0;\n   let oldTransitionOptions = void 0\n\n   // Run this reactive block when the last transition state is not equal to the current state.\n   $: if (oldTransition !== transition)\n   {\n      // If transition is defined and not the default transition then set it to both in and out transition otherwise\n      // set the default transition to both in & out transitions.\n      const newTransition = s_DEFAULT_TRANSITION !== transition && typeof transition === 'function' ? transition :\n       s_DEFAULT_TRANSITION;\n\n      inTransition = newTransition;\n      outTransition = newTransition;\n\n      oldTransition = newTransition;\n   }\n\n   // Run this reactive block when the last transition options state is not equal to the current options state.\n   $: if (oldTransitionOptions !== transitionOptions)\n   {\n      const newOptions = transitionOptions !== s_DEFAULT_TRANSITION_OPTIONS && typeof transitionOptions === 'object' ?\n       transitionOptions : s_DEFAULT_TRANSITION_OPTIONS;\n\n      inTransitionOptions = newOptions;\n      outTransitionOptions = newOptions;\n\n      oldTransitionOptions = newOptions;\n   }\n\n   // Handle cases if inTransition is unset; assign noop default transition function.\n   $: if (typeof inTransition !== 'function') { inTransition = s_DEFAULT_TRANSITION; }\n\n   $:\n   {\n      // Handle cases if outTransition is unset; assign noop default transition function.\n      if (typeof outTransition !== 'function') { outTransition = s_DEFAULT_TRANSITION; }\n\n      // Set jquery close animation to either run or not when an out transition is changed.\n      if (foundryApp && typeof foundryApp?.options?.jqueryCloseAnimation === 'boolean')\n      {\n         foundryApp.options.jqueryCloseAnimation = outTransition === s_DEFAULT_TRANSITION;\n      }\n   }\n\n   // Handle cases if inTransitionOptions is unset; assign empty default transition options.\n   $: if (typeof inTransitionOptions !== 'object') { inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\n\n   // Handle cases if outTransitionOptions is unset; assign empty default transition options.\n   $: if (typeof outTransitionOptions !== 'object') { outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\n</script>\n\n<svelte:options accessors={true}/>\n\n{#if bindHeightChanged}\n   <div id={foundryApp.id}\n        class=\"app window-app {foundryApp.options.classes.join(' ')}\"\n        data-appid={foundryApp.appId}\n        bind:clientHeight={heightChanged}\n        bind:this={elementRoot}\n        in:inTransition={inTransitionOptions}\n        out:outTransition={outTransitionOptions}>\n      <TJSApplicationHeader />\n      <section class=window-content bind:this={elementContent} bind:clientHeight={heightChanged}>\n         {#if Array.isArray(allChildren)}\n            <TJSContainer children={allChildren} />\n         {:else}\n            <slot />\n         {/if}\n      </section>\n      <ResizableHandle />\n   </div>\n{:else}\n   <div id={foundryApp.id}\n        class=\"app window-app {foundryApp.options.classes.join(' ')}\"\n        data-appid={foundryApp.appId}\n        bind:this={elementRoot}\n        in:inTransition={inTransitionOptions}\n        out:outTransition={outTransitionOptions}>\n      <TJSApplicationHeader />\n      <section class=window-content bind:this={elementContent}>\n         {#if Array.isArray(allChildren)}\n            <TJSContainer children={allChildren} />\n         {:else}\n            <slot />\n         {/if}\n      </section>\n      <ResizableHandle />\n   </div>\n{/if}\n\n<style>\n   .window-app {\n      overflow: inherit;\n   }\n</style>","<script>\n   import { getContext, setContext }   from 'svelte';\n\n   import TJSApplicationHeader         from './TJSApplicationHeader.svelte';\n   import TJSContainer                 from '../TJSContainer.svelte';\n   import ResizableHandle              from './ResizableHandle.svelte';\n\n   import {\n      s_DEFAULT_TRANSITION,\n      s_DEFAULT_TRANSITION_OPTIONS }   from '@typhonjs-fvtt/svelte/transition';\n\n   // Bound to the content and root elements. Can be used by parent components. SvelteApplication will also\n   // use 'elementRoot' to set the element of the Application. You can also provide `elementContent` and\n   // `elementTarget`. Please see SvelteApplication lifecycle documentation.\n   export let elementContent;\n   export let elementRoot;\n\n   // The children array can be specified by a parent via prop or is read below from the external context.\n   export let children = void 0\n\n   // If a parent component binds and sets `heightChanged` to true then it is bound to the content & root element\n   // `clientHeight`.\n   export let heightChanged = false;\n\n   // Store the initial `heightChanged` state. If it is truthy then `clientHeight` for the content & root elements\n   // are bound to `heightChanged` to signal to any parent component of any change to the client & root.\n   const bindHeightChanged = !!heightChanged;\n\n   setContext('getElementContent', () => elementContent);\n   setContext('getElementRoot', () => elementRoot);\n\n   const context = getContext('external');\n\n   // Store Foundry Application reference.\n   const foundryApp = context.foundryApp;\n\n   // This component can host multiple children defined via props or in the TyphonJS SvelteData configuration object\n   // that are potentially mounted in the content area. If no children defined then this component mounts any slotted\n   // child.\n   const allChildren = Array.isArray(children) ? children :\n    typeof context === 'object' ? context.children : void 0;\n\n   // ---------------------------------------------------------------------------------------------------------------\n\n   // The following block is somewhat complex, but allows transition options to be updated reactively during\n   // runtime execution.\n\n   // Exports properties to set a transition w/ in / out options.\n   export let transition = void 0;\n   export let inTransition = s_DEFAULT_TRANSITION;\n   export let outTransition = s_DEFAULT_TRANSITION;\n\n   // Exports properties to set options for any transitions.\n   export let transitionOptions = void 0;\n   export let inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS;\n   export let outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS;\n\n   // Tracks last transition state.\n   let oldTransition = void 0;\n   let oldTransitionOptions = void 0\n\n   // Run this reactive block when the last transition state is not equal to the current state.\n   $: if (oldTransition !== transition)\n   {\n      // If transition is defined and not the default transition then set it to both in and out transition otherwise\n      // set the default transition to both in & out transitions.\n      const newTransition = s_DEFAULT_TRANSITION !== transition && typeof transition === 'function' ? transition :\n       s_DEFAULT_TRANSITION;\n\n      inTransition = newTransition;\n      outTransition = newTransition;\n\n      oldTransition = newTransition;\n   }\n\n   // Run this reactive block when the last transition options state is not equal to the current options state.\n   $: if (oldTransitionOptions !== transitionOptions)\n   {\n      const newOptions = transitionOptions !== s_DEFAULT_TRANSITION_OPTIONS && typeof transitionOptions === 'object' ?\n       transitionOptions : s_DEFAULT_TRANSITION_OPTIONS;\n\n      inTransitionOptions = newOptions;\n      outTransitionOptions = newOptions;\n\n      oldTransitionOptions = newOptions;\n   }\n\n   // Handle cases if inTransition is unset; assign noop default transition function.\n   $: if (typeof inTransition !== 'function') { inTransition = s_DEFAULT_TRANSITION; }\n\n   $:\n   {\n      // Handle cases if outTransition is unset; assign noop default transition function.\n      if (typeof outTransition !== 'function') { outTransition = s_DEFAULT_TRANSITION; }\n\n      // Set jquery close animation to either run or not when an out transition is changed.\n      if (foundryApp && typeof foundryApp?.options?.jqueryCloseAnimation === 'boolean')\n      {\n         foundryApp.options.jqueryCloseAnimation = outTransition === s_DEFAULT_TRANSITION;\n      }\n   }\n\n   // Handle cases if inTransitionOptions is unset; assign empty default transition options.\n   $: if (typeof inTransitionOptions !== 'object') { inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\n\n   // Handle cases if outTransitionOptions is unset; assign empty default transition options.\n   $: if (typeof outTransitionOptions !== 'object') { outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\n</script>\n\n<svelte:options accessors={true}/>\n\n{#if bindHeightChanged}\n   <div id={foundryApp.id}\n        class=\"tjs-app tjs-window-app {foundryApp.options.classes.join(' ')}\"\n        data-appid={foundryApp.appId}\n        bind:clientHeight={heightChanged}\n        bind:this={elementRoot}\n        in:inTransition={inTransitionOptions}\n        out:outTransition={outTransitionOptions}>\n       <TJSApplicationHeader />\n       <section class=window-content bind:this={elementContent} bind:clientHeight={heightChanged}>\n           {#if Array.isArray(allChildren)}\n               <TJSContainer children={allChildren} />\n           {:else}\n               <slot />\n           {/if}\n       </section>\n       <ResizableHandle />\n   </div>\n{:else}\n   <div id={foundryApp.id}\n        class=\"tjs-app tjs-window-app {foundryApp.options.classes.join(' ')}\"\n        data-appid={foundryApp.appId}\n        bind:this={elementRoot}\n        in:inTransition={inTransitionOptions}\n        out:outTransition={outTransitionOptions}>\n       <TJSApplicationHeader />\n       <section class=window-content bind:this={elementContent}>\n           {#if Array.isArray(allChildren)}\n               <TJSContainer children={allChildren} />\n           {:else}\n               <slot />\n           {/if}\n       </section>\n      <ResizableHandle />\n   </div>\n{/if}\n\n\n<style>\n  /**\n   * Defines styles that mimic a Foundry popout Application. `:global` is used to preserve the unused CSS in the\n   * template above. A primary benefit of a separate Application implementation is that the styles are not overridden\n   * by any given game system / mods that might effect the standard Foundry Application CSS. This allows separate\n   * and unique styles to be given to this component regardless of game system / module modifications.\n   */\n  :global(.tjs-app) {\n    max-height: 100%;\n    background: url(/ui/denim075.png) repeat;\n    border-radius: 5px;\n    box-shadow: 0 0 20px #000;\n    margin: 3px 0;\n    color: #f0f0e0;\n    position: absolute;\n  }\n\n  :global(.tjs-window-app) {\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    padding: 0;\n    z-index: 99;\n  }\n\n  :global(.tjs-window-app .window-content) {\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    padding: 8px;\n    color: #191813;\n    overflow-y: auto;\n    overflow-x: hidden;\n  }\n\n  :global(.tjs-window-app .window-header) {\n    flex: 0 0 30px;\n    overflow: hidden;\n    padding: 0 8px;\n    line-height: 30px;\n    border-bottom: 1px solid #000;\n    pointer-events: auto;\n  }\n\n  :global(.tjs-window-app .window-header a) {\n    flex: none;\n    margin: 0 0 0 8px;\n  }\n\n  :global(.tjs-window-app .window-header h4) {\n    font-family: Signika, sans-serif;\n  }\n\n  :global(.tjs-window-app .window-header i[class^=fa]) {\n    margin-right: 3px;\n  }\n\n  :global(.tjs-window-app .window-header .window-title) {\n    margin: 0;\n    word-break: break-all;\n  }\n\n  :global(.tjs-window-app .window-resizable-handle) {\n    width: 20px;\n    height: 20px;\n    position: absolute;\n    bottom: -1px;\n    right: 0;\n    background: #444;\n    padding: 2px;\n    border: 1px solid #111;\n    border-radius: 4px 0 0 0;\n  }\n\n  :global(.tjs-window-app .window-resizable-handle i.fas) {\n    transform: rotate(45deg);\n  }\n\n  :global(.tjs-window-app.minimized .window-header) {\n     border: 1px solid #000;\n  }\n</style>","<script>\n   import { createEventDispatcher } from 'svelte';\n   import { current_component }     from 'svelte/internal';\n\n   import { localize }              from '@typhonjs-fvtt/svelte/helper';\n   import { slideFade }             from '@typhonjs-fvtt/svelte/transition';\n   import { outroAndDestroy }       from '@typhonjs-fvtt/svelte/util';\n\n   export let id = '';\n   export let x = 0;\n   export let y = 0;\n   export let items = [];\n   export let zIndex = 10000;\n   export let transitionOptions = void 0;\n\n   // Bound to the nav element / menu.\n   let menuEl;\n\n   // Store this component reference.\n   const local = current_component;\n\n   // Dispatches `close` event.\n   const dispatch = createEventDispatcher();\n\n   // Stores if this context menu is closed.\n   let closed = false;\n\n   /**\n    * Provides a custom animate callback allowing inspection of the element to change positioning styles based on the\n    * height / width of the element and `document.body`. This allows the context menu to expand up when the menu\n    * is outside the height bound of `document.body` and expand to the left if width is greater than `document.body`.\n    *\n    * @param {HTMLElement} node - nav element.\n    *\n    * @returns {object} Transition object.\n    */\n   function animate(node)\n   {\n      const expandUp = y + node.clientHeight > document.body.clientHeight\n      const expandLeft = x + node.clientWidth > document.body.clientWidth\n\n      node.style.top = expandUp ? null : `${y}px`;\n      node.style.bottom = expandUp ? `${document.body.clientHeight - y}px` : null;\n\n      node.style.left = expandLeft ? null : `${x}px`;\n      node.style.right = expandLeft ? `${document.body.clientWidth - x}px` : null;\n\n      return slideFade(node, transitionOptions);\n   }\n\n   /**\n    * Invokes a function on click of a menu item then fires the `close` event and automatically runs the outro\n    * transition and destroys the component.\n    *\n    * @param {function} callback - Function to invoke on click.\n    */\n   function onClick(callback)\n   {\n      if (typeof callback === 'function') { callback(); }\n\n      if (!closed)\n      {\n         dispatch('close');\n         closed = true;\n         outroAndDestroy(local);\n      }\n   }\n\n   /**\n    * Determines if a pointer pressed to the document body closes the context menu. If the click occurs outside the\n    * context menu then fire the `close` event and run the outro transition then destroy the component.\n    *\n    * @param {PointerEvent}   event - Pointer event from document body click.\n    */\n   async function onClose(event)\n   {\n      // Early out if the pointer down is inside the menu element.\n      if (event.target === menuEl || menuEl.contains(event.target)) { return; }\n\n      // Early out if the event page X / Y is the same as this context menu.\n      if (Math.floor(event.pageX) === x && Math.floor(event.pageY) === y) { return; }\n\n      if (!closed)\n      {\n         dispatch('close');\n         closed = true;\n         outroAndDestroy(local);\n      }\n   }\n</script>\n<!-- bind to `document.body` to receive pointer down events to close the context menu. -->\n<svelte:body on:pointerdown={onClose}/>\n\n<nav id={id} class=tjs-context-menu transition:animate bind:this={menuEl} style=\"z-index: {zIndex}\">\n    <ol class=tjs-context-items>\n        {#each items as item}\n            <li class=tjs-context-item on:click={() => onClick(item.onclick)}><i class={item.icon}></i>{localize(item.label)}</li>\n        {/each}\n    </ol>\n</nav>\n\n<style>\n    .tjs-context-menu {\n        position: fixed;\n        width: fit-content;\n        font-size: 14px;\n        box-shadow: 0 0 10px #000;\n        height: max-content;\n        min-width: 150px;\n        max-width: 360px;\n        background: #23221d;\n        border: 1px solid #000;\n        border-radius: 5px;\n        color: #EEE;\n    }\n\n    .tjs-context-menu ol.tjs-context-items {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n\n    .tjs-context-menu li.tjs-context-item {\n        padding: 0 5px;\n        line-height: 32px;\n    }\n\n    .tjs-context-menu li.tjs-context-item:hover {\n        color: #FFF;\n        text-shadow: 0 0 4px red;\n    }\n\n    .tjs-context-menu li.tjs-context-item > i {\n        margin-right: 5px;\n    }\n</style>","<script>\n   import { getContext }   from 'svelte';\n\n   import {\n      isSvelteComponent,\n      parseSvelteConfig }  from '@typhonjs-fvtt/svelte/util';\n\n   export let data = {};\n\n   let buttons;\n   let content;\n   let dialogComponent;\n   let dialogProps = {};\n\n   let foundryApp = getContext('external').foundryApp;\n\n   // If `data.buttons` is not an object then set an empty array otherwise reduce the button data.\n   $: buttons = typeof data.buttons !== 'object' ? [] : Object.keys(data.buttons).reduce((obj, key) =>\n   {\n      const b = data.buttons[key];\n      if (b.condition !== false)\n      {\n         obj.push({\n            ...b,\n            id: key,\n            cssClass: [key, data.default === key ? 'default' : ''].filterJoin(' ')\n         })\n      }\n      return obj;\n   }, []);\n\n   $:\n   {\n      content = data.content;\n\n      try\n      {\n         if (isSvelteComponent(content))\n         {\n            dialogComponent = content;\n            dialogProps = {};\n         }\n         else if (typeof content === 'object')\n         {\n            const svelteConfig = parseSvelteConfig(content, foundryApp);\n            dialogComponent = svelteConfig.class;\n            dialogProps = svelteConfig.props ?? {};\n\n            // Check for any children parsed and added to the external context.\n            const children = svelteConfig?.context?.get('external')?.children;\n\n            // If so add to dialogProps.\n            if (Array.isArray(children)) { dialogProps.children = children; }\n         }\n         else\n         {\n            dialogComponent = void 0;\n            dialogProps = {};\n         }\n      }\n      catch (err)\n      {\n         dialogComponent = void 0;\n         dialogProps = {};\n\n         content = err.message;\n         console.error(err);\n      }\n   }\n\n   function onClick(button)\n   {\n      try\n      {\n         // Passing back the element is to keep with the existing Foundry API.\n         if (typeof button.callback === 'function')\n         {\n            button.callback(foundryApp.options.jQuery ? foundryApp.element : foundryApp.element[0]);\n         }\n\n         foundryApp.close();\n      }\n      catch(err)\n      {\n         ui.notifications.error(err);\n         throw new Error(err);\n      }\n   }\n\n   function onKeydown(event)\n   {\n      switch (event.key)\n      {\n         case 'Escape':\n            return foundryApp.close();\n\n         case 'Enter':\n            onClick(data.buttons[data.default]);\n            break;\n      }\n   }\n</script>\n\n<svelte:body on:keydown|preventDefault|stopPropagation={onKeydown} />\n\n<div class=\"dialog-content\">\n   {#if typeof content === 'string'}\n      {@html content}\n   {:else if dialogComponent}\n      <svelte:component this={dialogComponent} {...dialogProps} />\n   {/if}\n</div>\n<div class=\"dialog-buttons\">\n   {#each buttons as button (button.id)}\n   <button class=\"dialog-button {button.cssClass}\" on:click={() => onClick(button)}>\n      {@html button.icon}\n      {@html button.label}\n   </button>\n   {/each}\n</div>\n\n<style>\n   div.dialog-buttons {\n      padding-top: 8px;\n   }\n</style>","<script>\n   import { getContext }               from 'svelte';\n   import { fade }                     from 'svelte/transition';\n\n   import ApplicationShell             from '../application/ApplicationShell.svelte';\n   import DialogContent                from './DialogContent.svelte';\n   import TJSGlassPane                 from '../TJSGlassPane.svelte';\n\n   // Application shell contract.\n   export let elementRoot;\n\n   // The dialog data.\n   export let data = {};\n\n   const foundryApp = getContext('external').foundryApp;\n\n   const s_MODAL_TRANSITION = fade;\n   const s_MODAL_TRANSITION_OPTIONS = { duration: 200 };\n   const s_MODAL_BACKGROUND = '#50505080'\n\n   let modal = void 0;\n\n   // Stores props for the ApplicationShell.\n   const appProps = {\n      // Stores any transition functions.\n      transition: void 0,\n      inTransition: void 0,\n      outTransition: void 0,\n\n      // Stores properties to set for options for any transitions.\n      transitionOptions: void 0,\n      inTransitionOptions: void 0,\n      outTransitionOptions: void 0,\n   }\n\n   const modalProps = {\n      // Background CSS style string.\n      background: void 0,\n\n      // Stores any transition functions.\n      transition: void 0,\n      inTransition: void 0,\n      outTransition: void 0,\n\n      // Stores properties to set for options for any transitions.\n      transitionOptions: void 0,\n      inTransitionOptions: void 0,\n      outTransitionOptions: void 0,\n   }\n\n   let zIndex = void 0;\n\n   // Only set modal once on mount. You can't change between a modal an non-modal dialog during runtime.\n   if (modal === void 0) { modal = typeof data?.modal === 'boolean' ? data.modal : false; }\n\n   // Retrieve values from the DialogData object and also potentially set any SvelteApplication accessors.\n   // Explicit checks are performed against existing local variables as the only externally reactive variable is `data`.\n   // All of the checks below trigger when there are any external changes to the `data` prop.\n   // Prevent any unnecessary changing of local & `foundryApp` variables unless actual changes occur.\n\n   // Foundry App options --------------------------------------------------------------------------------------------\n\n   $: if (typeof data === 'object')\n   {\n      const newZIndex = Number.isInteger(data.zIndex) || data.zIndex === null ? data.zIndex :\n       modal ? Number.MAX_SAFE_INTEGER : Number.MAX_SAFE_INTEGER - 1\n      if (zIndex !== newZIndex) { zIndex = newZIndex; }\n\n      // Update the main foundry options when data changes. Perform explicit checks against existing data in `foundryApp`.\n      const newDraggable = data.draggable ?? true;\n      if (foundryApp.draggable !== newDraggable) { foundryApp.draggable = newDraggable; }\n\n      const newPopOut = data.popOut ?? true;\n      if (foundryApp.popOut !== newPopOut) { foundryApp.popOut = newPopOut; }\n\n      const newResizable = data.resizable ?? false;\n      if (foundryApp.resizable !== newResizable) { foundryApp.resizable = newResizable; }\n\n      // Note foundryApp.title from Application localizes `options.title`, so compare with `foundryApp.options.title`.\n      const newTitle = data.title ?? 'Dialog';\n      if (newTitle !== foundryApp?.options?.title) { foundryApp.title = newTitle; }\n\n      if (foundryApp.zIndex !== zIndex) { foundryApp.zIndex = zIndex; }\n   }\n\n   // ApplicationShell transition options ----------------------------------------------------------------------------\n\n   $: if (typeof data?.transition === 'object')\n   {\n      // Store data.transitions to shorten statements below.\n      const d = data.transition;\n\n      if (d?.transition !== appProps.transition) { appProps.transition = d.transition; }\n      if (d?.inTransition !== appProps.inTransition) { appProps.inTransition = d.inTransition; }\n      if (d?.outTransition !== appProps.outTransition) { appProps.outTransition = d.outTransition; }\n      if (d?.transitionOptions !== appProps.transitionOptions) { appProps.transitionOptions = d.transitionOptions; }\n\n      if (d?.inTransitionOptions !== appProps.inTransitionOptions)\n      {\n         appProps.inTransitionOptions = d.inTransitionOptions;\n      }\n\n      if (d?.outTransitionOptions !== appProps.outTransitionOptions)\n      {\n         appProps.outTransitionOptions = d.outTransitionOptions;\n      }\n   }\n\n   // Modal options --------------------------------------------------------------------------------------------------\n\n   $:\n   {\n      const newModalBackground = typeof data?.modalOptions?.background === 'string' ? data.modalOptions.background :\n       s_MODAL_BACKGROUND;\n\n      if (newModalBackground !== modalProps.background) { modalProps.background = newModalBackground; }\n   }\n\n   $: if (typeof data?.modalOptions?.transition === 'object')\n   {\n      // Store data.transitions to shorten statements below.\n      const d = data.modalOptions.transition;\n\n      if (d?.transition !== modalProps.transition)\n      {\n         modalProps.transition = typeof d?.transition === 'function' ? d.transition : s_MODAL_TRANSITION;\n      }\n\n      if (d?.inTransition !== modalProps.inTransition) { modalProps.inTransition = d.inTransition; }\n      if (d?.outTransition !== modalProps.outTransition) { modalProps.outTransition = d.outTransition; }\n\n      // Provide default transition options if not defined.\n      if (d?.transitionOptions !== modalProps.transitionOptions)\n      {\n         modalProps.transitionOptions = typeof d?.transitionOptions === 'object' ? d.transitionOptions :\n          s_MODAL_TRANSITION_OPTIONS;\n      }\n\n      if (d?.inTransitionOptions !== modalProps.inTransitionOptions)\n      {\n         modalProps.inTransitionOptions = d.inTransitionOptions;\n      }\n\n      if (d?.outTransitionOptions !== modalProps.outTransitionOptions)\n      {\n         modalProps.outTransitionOptions = d.outTransitionOptions;\n      }\n   }\n   else  // Provide a fallback / default glass pane transition when `data.modalOptions.transition` is not defined.\n   {\n      const newModalTransition = typeof data?.modalOptions?.transition?.transition === 'function' ?\n       data.modalOptions.transition.transition : s_MODAL_TRANSITION;\n\n      if (newModalTransition !== modalProps.transition) { modalProps.transition = newModalTransition; }\n\n      const newModalTransitionOptions = typeof data?.modalOptions?.transitionOptions === 'object' ?\n       data.modalOptions.transitionOptions : s_MODAL_TRANSITION_OPTIONS;\n\n      if (newModalTransitionOptions !== modalProps.transitionOptions)\n      {\n         modalProps.transitionOptions = newModalTransitionOptions;\n      }\n   }\n</script>\n\n<svelte:options accessors={true}/>\n\n{#if modal}\n   <TJSGlassPane id={foundryApp.id} stopPropagation={false} {...modalProps} {zIndex}>\n      <ApplicationShell bind:elementRoot {...appProps}>\n         <DialogContent {data} />\n      </ApplicationShell>\n   </TJSGlassPane>\n{:else}\n   <ApplicationShell bind:elementRoot {...appProps}>\n      <DialogContent {data} />\n   </ApplicationShell>\n{/if}"],"names":["insert","ctx","length","props","class","Array","isArray","warn","children","context","getContext","allChildren","glassPane","oldTransition","oldTransitionOptions","id","zIndex","Number","MAX_SAFE_INTEGER","background","captureInput","preventDefault","stopPropagation","transition","inTransition","s_DEFAULT_TRANSITION","outTransition","transitionOptions","inTransitionOptions","s_DEFAULT_TRANSITION_OPTIONS","outTransitionOptions","style","maxWidth","maxHeight","width","height","focus","pointerEvents","newTransition","newOptions","event","localize","label","icon","title","append","button","onclick","call","positionable","booleanStore","foundryApp","storeTitle","storeAppOptions","storeDraggable","draggable","storeHeaderButtons","storeUIOptions","headerButtons","storeMinimizable","minimizable","options","popOut","bringToTop","node","callback","_onToggleMinimize","bind","activateListeners","addEventListener","removeListeners","removeEventListener","update","destroy","isResizable","getElementRoot","storeResizable","resizable","storeMinimized","minimized","elementResize","display","$storeMinimized","elementRoot","classList","position","initialPosition","moveTime","active","handlers","resizeDown","e","now","Date","foundry","utils","duplicate","clientHeight","clientWidth","x","clientX","y","clientY","globalThis","resizeMove","resizeUp","onResizePointerDown","onResizePointerMove","setPosition","onResizePointerUp","_onResize","classes","join","appId","elementContent","heightChanged","bindHeightChanged","setContext","jqueryCloseAnimation","menuEl","items","local","current_component","dispatch","createEventDispatcher","closed","onClick","outroAndDestroy","expandUp","document","body","expandLeft","top","bottom","left","right","slideFade","target","contains","Math","floor","pageX","pageY","item","cssClass","buttons","content","dialogComponent","data","dialogProps","jQuery","element","close","err","ui","notifications","error","Error","Object","keys","reduce","obj","key","b","condition","push","default","filterJoin","isSvelteComponent","svelteConfig","parseSvelteConfig","get","message","console","s_MODAL_TRANSITION","fade","s_MODAL_TRANSITION_OPTIONS","duration","modal","appProps","modalProps","newZIndex","isInteger","newDraggable","newPopOut","newResizable","newTitle","d","newModalBackground","modalOptions","newModalTransition","newModalTransitionOptions"],"mappings":"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"}