{"version":3,"file":"application.js","sources":["../node_modules/@typhonjs-utils/object/src/functions.js","../node_modules/@typhonjs-fvtt/svelte/_dist/application/SvelteApplication.js","../node_modules/@typhonjs-fvtt/svelte/_dist/application/TJSDialog.js","../node_modules/@typhonjs-fvtt/svelte/_dist/application/TJSMenu.js"],"sourcesContent":["/**\r\n * Provides common object manipulation utilities including depth traversal, obtaining accessors, safely setting values /\r\n * equality tests, and validation.\r\n */\r\n\r\nconst s_TAG_MAP = '[object Map]';\r\nconst s_TAG_SET = '[object Set]';\r\nconst s_TAG_STRING = '[object String]';\r\n\r\n/**\r\n * @typedef {object} ValidationEntry - Provides data for a validation check.\r\n *\r\n * @property {string}               [type] - Optionally tests with a typeof check.\r\n *\r\n * @property {Array<*>|Function|Set<*>}  [expected] - Optional array, function, or set of expected values to test\r\n * against.\r\n *\r\n * @property {string}               [message] - Optional message to include.\r\n *\r\n * @property {boolean}              [required=true] - When false if the accessor is missing validation is skipped.\r\n *\r\n * @property {boolean}              [error=true] - When true and error is thrown otherwise a boolean is returned.\r\n */\r\n\r\n/**\r\n * Freezes all entries traversed that are objects including entries in arrays.\r\n *\r\n * @param {object|Array}   data - An object or array.\r\n *\r\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\r\n *\r\n * @returns {object|Array} The frozen object.\r\n */\r\nexport function deepFreeze(data, skipFreezeKeys = [])\r\n{\r\n   /* istanbul ignore if */\r\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\r\n\r\n   /* istanbul ignore if */\r\n   if (!Array.isArray(skipFreezeKeys)) { throw new TypeError(`'skipFreezeKeys' is not an 'array'.`); }\r\n\r\n   return _deepFreeze(data, skipFreezeKeys);\r\n}\r\n\r\n/**\r\n * Performs a naive depth traversal of an object / array. The data structure _must not_ have circular references.\r\n * The result of the callback function is used to modify in place the given data.\r\n *\r\n * @param {object|Array}   data - An object or array.\r\n *\r\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\r\n *\r\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\r\n *                                  the given data.\r\n *\r\n * @returns {*} The data object.\r\n */\r\nexport function depthTraverse(data, func, modify = false)\r\n{\r\n   /* istanbul ignore if */\r\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\r\n\r\n   /* istanbul ignore if */\r\n   if (typeof func !== 'function') { throw new TypeError(`'func' is not a 'function'.`); }\r\n\r\n   return _depthTraverse(data, func, modify);\r\n}\r\n\r\n/**\r\n * Returns a list of accessor keys by traversing the given object.\r\n *\r\n * @param {object}   data - An object to traverse for accessor keys.\r\n *\r\n * @returns {string[]} Accessor list.\r\n */\r\nexport function getAccessorList(data)\r\n{\r\n   if (typeof data !== 'object') { throw new TypeError(`getAccessorList error: 'data' is not an 'object'.`); }\r\n\r\n   return _getAccessorList(data);\r\n}\r\n\r\n/**\r\n * Tests for whether an object is iterable.\r\n *\r\n * @param {object} object - An object.\r\n *\r\n * @returns {boolean} Whether object is iterable.\r\n */\r\nexport function isIterable(object)\r\n{\r\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\r\n\r\n   return typeof object[Symbol.iterator] === 'function';\r\n}\r\n\r\n/**\r\n * Tests for whether an object is async iterable.\r\n *\r\n * @param {object} object - An object.\r\n *\r\n * @returns {boolean} Whether object is async iterable.\r\n */\r\nexport function isIterableAsync(object)\r\n{\r\n   if (object === null || object === void 0 || typeof object !== 'object') { return false; }\r\n\r\n   return typeof object[Symbol.asyncIterator] === 'function';\r\n}\r\n\r\n/**\r\n * Tests for whether object is not null and a typeof object.\r\n *\r\n * @param {object} object - An object.\r\n *\r\n * @returns {boolean} Is it an object.\r\n */\r\nexport function isObject(object)\r\n{\r\n   return object !== null && typeof object === 'object';\r\n}\r\n\r\n/**\r\n * Safely returns keys on an object or an empty array if not an object.\r\n *\r\n * @param {object} object - An object.\r\n *\r\n * @returns {string[]} Object keys\r\n */\r\nexport function objectKeys(object)\r\n{\r\n   return object !== null && typeof object === 'object' ? Object.keys(object) : [];\r\n}\r\n\r\n/**\r\n * Safely returns an objects size. Note for String objects unicode is not taken into consideration.\r\n *\r\n * @param {object} object - An object.\r\n *\r\n * @returns {number} Size of object.\r\n */\r\nexport function objectSize(object)\r\n{\r\n   if (object === void 0 || object === null || typeof object !== 'object') { return 0; }\r\n\r\n   const tag = Object.prototype.toString.call(object);\r\n\r\n   if (tag === s_TAG_MAP || tag === s_TAG_SET) { return object.size; }\r\n\r\n   if (tag === s_TAG_STRING) { return object.length; }\r\n\r\n   return Object.keys(object).length;\r\n}\r\n\r\n/**\r\n * Provides a way to safely access an objects data / entries given an accessor string which describes the\r\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\r\n * to walk.\r\n *\r\n * @param {object}   data - An object to access entry data.\r\n *\r\n * @param {string}   accessor - A string describing the entries to access.\r\n *\r\n * @param {*}        defaultValue - (Optional) A default value to return if an entry for accessor is not found.\r\n *\r\n * @returns {object} The data object.\r\n */\r\nexport function safeAccess(data, accessor, defaultValue = void 0)\r\n{\r\n   if (typeof data !== 'object') { return defaultValue; }\r\n   if (typeof accessor !== 'string') { return defaultValue; }\r\n\r\n   const access = accessor.split('.');\r\n\r\n   // Walk through the given object by the accessor indexes.\r\n   for (let cntr = 0; cntr < access.length; cntr++)\r\n   {\r\n      // If the next level of object access is undefined or null then return the empty string.\r\n      if (typeof data[access[cntr]] === 'undefined' || data[access[cntr]] === null) { return defaultValue; }\r\n\r\n      data = data[access[cntr]];\r\n   }\r\n\r\n   return data;\r\n}\r\n\r\n/**\r\n * Provides a way to safely batch set an objects data / entries given an array of accessor strings which describe the\r\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\r\n * to walk. If value is an object the accessor will be used to access a target value from `value` which is\r\n * subsequently set to `data` by the given operation. If `value` is not an object it will be used as the target\r\n * value to set across all accessors.\r\n *\r\n * @param {object}         data - An object to access entry data.\r\n *\r\n * @param {Array<string>}  accessors - A string describing the entries to access.\r\n *\r\n * @param {object|*}       value - A new value to set if an entry for accessor is found.\r\n *\r\n * @param {string}         [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\r\n *                                             'set-undefined', 'sub'.\r\n *\r\n * @param {object|*}       [defaultAccessValue=0] - A new value to set if an entry for accessor is found.\r\n *\r\n *\r\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\r\n *                                          automatically.\r\n */\r\nexport function safeBatchSet(data, accessors, value, operation = 'set', defaultAccessValue = 0, createMissing = true)\r\n{\r\n   if (typeof data !== 'object') { throw new TypeError(`safeBatchSet Error: 'data' is not an 'object'.`); }\r\n   if (!Array.isArray(accessors)) { throw new TypeError(`safeBatchSet Error: 'accessors' is not an 'array'.`); }\r\n\r\n   if (typeof value === 'object')\r\n   {\r\n      accessors.forEach((accessor) =>\r\n      {\r\n         const targetValue = safeAccess(value, accessor, defaultAccessValue);\r\n         safeSet(data, accessor, targetValue, operation, createMissing);\r\n      });\r\n   }\r\n   else\r\n   {\r\n      accessors.forEach((accessor) =>\r\n      {\r\n         safeSet(data, accessor, value, operation, createMissing);\r\n      });\r\n   }\r\n}\r\n\r\n/**\r\n * Compares a source object and values of entries against a target object. If the entries in the source object match\r\n * the target object then `true` is returned otherwise `false`. If either object is undefined or null then false\r\n * is returned.\r\n *\r\n * @param {object}   source - Source object.\r\n *\r\n * @param {object}   target - Target object.\r\n *\r\n * @returns {boolean} True if equal.\r\n */\r\nexport function safeEqual(source, target)\r\n{\r\n   if (typeof source === 'undefined' || source === null || typeof target === 'undefined' || target === null)\r\n   {\r\n      return false;\r\n   }\r\n\r\n   const sourceAccessors = getAccessorList(source);\r\n\r\n   for (let cntr = 0; cntr < sourceAccessors.length; cntr++)\r\n   {\r\n      const accessor = sourceAccessors[cntr];\r\n\r\n      const sourceObjectValue = safeAccess(source, accessor);\r\n      const targetObjectValue = safeAccess(target, accessor);\r\n\r\n      if (sourceObjectValue !== targetObjectValue) { return false; }\r\n   }\r\n\r\n   return true;\r\n}\r\n\r\n/**\r\n * Provides a way to safely set an objects data / entries given an accessor string which describes the\r\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\r\n * to walk.\r\n *\r\n * @param {object}   data - An object to access entry data.\r\n *\r\n * @param {string}   accessor - A string describing the entries to access.\r\n *\r\n * @param {*}        value - A new value to set if an entry for accessor is found.\r\n *\r\n * @param {string}   [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set',\r\n *                                       'set-undefined', 'sub'.\r\n *\r\n * @param {boolean}  [createMissing=true] - If true missing accessor entries will be created as objects\r\n *                                          automatically.\r\n *\r\n * @returns {boolean} True if successful.\r\n */\r\nexport function safeSet(data, accessor, value, operation = 'set', createMissing = true)\r\n{\r\n   if (typeof data !== 'object') { throw new TypeError(`safeSet Error: 'data' is not an 'object'.`); }\r\n   if (typeof accessor !== 'string') { throw new TypeError(`safeSet Error: 'accessor' is not a 'string'.`); }\r\n\r\n   const access = accessor.split('.');\r\n\r\n   // Walk through the given object by the accessor indexes.\r\n   for (let cntr = 0; cntr < access.length; cntr++)\r\n   {\r\n      // If data is an array perform validation that the accessor is a positive integer otherwise quit.\r\n      if (Array.isArray(data))\r\n      {\r\n         const number = (+access[cntr]);\r\n\r\n         if (!Number.isInteger(number) || number < 0) { return false; }\r\n      }\r\n\r\n      if (cntr === access.length - 1)\r\n      {\r\n         switch (operation)\r\n         {\r\n            case 'add':\r\n               data[access[cntr]] += value;\r\n               break;\r\n\r\n            case 'div':\r\n               data[access[cntr]] /= value;\r\n               break;\r\n\r\n            case 'mult':\r\n               data[access[cntr]] *= value;\r\n               break;\r\n\r\n            case 'set':\r\n               data[access[cntr]] = value;\r\n               break;\r\n\r\n            case 'set-undefined':\r\n               if (typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = value; }\r\n               break;\r\n\r\n            case 'sub':\r\n               data[access[cntr]] -= value;\r\n               break;\r\n         }\r\n      }\r\n      else\r\n      {\r\n         // If createMissing is true and the next level of object access is undefined then create a new object entry.\r\n         if (createMissing && typeof data[access[cntr]] === 'undefined') { data[access[cntr]] = {}; }\r\n\r\n         // Abort if the next level is null or not an object and containing a value.\r\n         if (data[access[cntr]] === null || typeof data[access[cntr]] !== 'object') { return false; }\r\n\r\n         data = data[access[cntr]];\r\n      }\r\n   }\r\n\r\n   return true;\r\n}\r\n\r\n/**\r\n * Performs bulk setting of values to the given data object.\r\n *\r\n * @param {object}            data - The data object to set data.\r\n *\r\n * @param {object<string, *>} accessorValues - Object of accessor keys to values to set.\r\n *\r\n * @param {string}            [operation='set'] - Operation to perform including: 'add', 'div', 'mult', 'set', 'sub';\r\n *                                                default (`set`).\r\n *\r\n * @param {boolean}           [createMissing=true] - If true missing accessor entries will be created as objects\r\n *                                                   automatically.\r\n */\r\nexport function safeSetAll(data, accessorValues, operation = 'set', createMissing = true)\r\n{\r\n   if (typeof data !== 'object') { throw new TypeError(`'data' is not an 'object'.`); }\r\n   if (typeof accessorValues !== 'object') { throw new TypeError(`'accessorValues' is not an 'object'.`); }\r\n\r\n   for (const accessor of Object.keys(accessorValues))\r\n   {\r\n      if (!accessorValues.hasOwnProperty(accessor)) { continue; } // eslint-disable-line no-prototype-builtins\r\n\r\n      safeSet(data, accessor, accessorValues[accessor], operation, createMissing);\r\n   }\r\n}\r\n\r\n/**\r\n * Performs bulk validation of data given an object, `validationData`, which describes all entries to test.\r\n *\r\n * @param {object}                           data - The data object to test.\r\n *\r\n * @param {object<string, ValidationEntry>}  validationData - Key is the accessor / value is a validation entry.\r\n *\r\n * @param {string}                           [dataName='data'] - Optional name of data.\r\n *\r\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\r\n */\r\nexport function validate(data, validationData = {}, dataName = 'data')\r\n{\r\n   if (typeof data !== 'object') { throw new TypeError(`'${dataName}' is not an 'object'.`); }\r\n   if (typeof validationData !== 'object') { throw new TypeError(`'validationData' is not an 'object'.`); }\r\n\r\n   let result;\r\n\r\n   for (const key of Object.keys(validationData))\r\n   {\r\n      if (!validationData.hasOwnProperty(key)) { continue; } // eslint-disable-line no-prototype-builtins\r\n\r\n      const entry = validationData[key];\r\n\r\n      switch (entry.test)\r\n      {\r\n         case 'array':\r\n            result = validateArray(data, key, entry, dataName);\r\n            break;\r\n\r\n         case 'entry':\r\n            result = validateEntry(data, key, entry, dataName);\r\n            break;\r\n\r\n         case 'entry|array':\r\n            result = validateEntryOrArray(data, key, entry, dataName);\r\n            break;\r\n      }\r\n   }\r\n\r\n   return result;\r\n}\r\n\r\n/**\r\n * Validates all array entries against potential type and expected tests.\r\n *\r\n * @param {object}            data - The data object to test.\r\n *\r\n * @param {string}            accessor - A string describing the entries to access.\r\n *\r\n * @param {object}            opts - Options object.\r\n *\r\n * @param {string}            [opts.type] - Tests with a typeof check.\r\n *\r\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\r\n *\r\n * @param {string}            [opts.message] - Optional message to include.\r\n *\r\n * @param {boolean}           [opts.required] - When false if the accessor is missing validation is skipped.\r\n *\r\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\r\n *\r\n * @param {string}            [dataName='data'] - Optional name of data.\r\n *\r\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\r\n */\r\nexport function validateArray(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\r\n error = true } = {}, dataName = 'data')\r\n{\r\n   const dataArray = safeAccess(data, accessor);\r\n\r\n   // A non-required entry is missing so return without validation.\r\n   if (!required && typeof dataArray === 'undefined') { return true; }\r\n\r\n   if (!Array.isArray(dataArray))\r\n   {\r\n      if (error)\r\n      {\r\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not an 'array'.`);\r\n      }\r\n      else\r\n      {\r\n         return false;\r\n      }\r\n   }\r\n\r\n   if (typeof type === 'string')\r\n   {\r\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\r\n      {\r\n         if (!(typeof dataArray[cntr] === type))\r\n         {\r\n            if (error)\r\n            {\r\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\r\n                dataArray[cntr];\r\n\r\n               throw _validateError(TypeError,\r\n                `'${dataName}.${accessor}[${cntr}]': '${dataEntryString}' is not a '${type}'.`);\r\n            }\r\n            else\r\n            {\r\n               return false;\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   // If expected is a function then test all array entries against the test function. If expected is a Set then\r\n   // test all array entries for inclusion in the set. Otherwise if expected is a string then test that all array\r\n   // entries as a `typeof` test against expected.\r\n   if (Array.isArray(expected))\r\n   {\r\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\r\n      {\r\n         if (!expected.includes(dataArray[cntr]))\r\n         {\r\n            if (error)\r\n            {\r\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\r\n                dataArray[cntr];\r\n\r\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\r\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\r\n            }\r\n            else\r\n            {\r\n               return false;\r\n            }\r\n         }\r\n      }\r\n   }\r\n   else if (expected instanceof Set)\r\n   {\r\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\r\n      {\r\n         if (!expected.has(dataArray[cntr]))\r\n         {\r\n            if (error)\r\n            {\r\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\r\n                dataArray[cntr];\r\n\r\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\r\n                dataEntryString}' is not an expected value: ${JSON.stringify(expected)}.`);\r\n            }\r\n            else\r\n            {\r\n               return false;\r\n            }\r\n         }\r\n      }\r\n   }\r\n   else if (typeof expected === 'function')\r\n   {\r\n      for (let cntr = 0; cntr < dataArray.length; cntr++)\r\n      {\r\n         try\r\n         {\r\n            const result = expected(dataArray[cntr]);\r\n\r\n            if (typeof result === 'undefined' || !result) { throw new Error(message); }\r\n         }\r\n         catch (err)\r\n         {\r\n            if (error)\r\n            {\r\n               const dataEntryString = typeof dataArray[cntr] === 'object' ? JSON.stringify(dataArray[cntr]) :\r\n                dataArray[cntr];\r\n\r\n               throw _validateError(Error, `'${dataName}.${accessor}[${cntr}]': '${\r\n                dataEntryString}' failed validation: ${err.message}.`);\r\n            }\r\n            else\r\n            {\r\n               return false;\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   return true;\r\n}\r\n\r\n/**\r\n * Validates data entry with a typeof check and potentially tests against the values in any given expected set.\r\n *\r\n * @param {object}            data - The object data to validate.\r\n *\r\n * @param {string}            accessor - A string describing the entries to access.\r\n *\r\n * @param {object}            opts - Options object\r\n *\r\n * @param {string}            [opts.type] - Tests with a typeof check.\r\n *\r\n * @param {Function|Set<*>}   [opts.expected] - Optional function or set of expected values to test against.\r\n *\r\n * @param {string}            [opts.message] - Optional message to include.\r\n *\r\n * @param {boolean}           [opts.required=true] - When false if the accessor is missing validation is skipped.\r\n *\r\n * @param {boolean}           [opts.error=true] - When true and error is thrown otherwise a boolean is returned.\r\n *\r\n * @param {string}            [dataName='data'] - Optional name of data.\r\n *\r\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\r\n */\r\nexport function validateEntry(data, accessor, { type = void 0, expected = void 0, message = void 0, required = true,\r\n error = true } = {}, dataName = 'data')\r\n{\r\n   const dataEntry = safeAccess(data, accessor);\r\n\r\n   // A non-required entry is missing so return without validation.\r\n   if (!required && typeof dataEntry === 'undefined') { return true; }\r\n\r\n   if (type && typeof dataEntry !== type)\r\n   {\r\n      if (error)\r\n      {\r\n         throw _validateError(TypeError, `'${dataName}.${accessor}' is not a '${type}'.`);\r\n      }\r\n      else\r\n      {\r\n         return false;\r\n      }\r\n   }\r\n\r\n   if ((expected instanceof Set && !expected.has(dataEntry)) ||\r\n    (Array.isArray(expected) && !expected.includes(dataEntry)))\r\n   {\r\n      if (error)\r\n      {\r\n         const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\r\n\r\n         throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' is not an expected value: ${\r\n          JSON.stringify(expected)}.`);\r\n      }\r\n      else\r\n      {\r\n         return false;\r\n      }\r\n   }\r\n   else if (typeof expected === 'function')\r\n   {\r\n      try\r\n      {\r\n         const result = expected(dataEntry);\r\n\r\n         if (typeof result === 'undefined' || !result) { throw new Error(message); }\r\n      }\r\n      catch (err)\r\n      {\r\n         if (error)\r\n         {\r\n            const dataEntryString = typeof dataEntry === 'object' ? JSON.stringify(dataEntry) : dataEntry;\r\n\r\n            throw _validateError(Error, `'${dataName}.${accessor}': '${dataEntryString}' failed to validate: ${\r\n             err.message}.`);\r\n         }\r\n         else\r\n         {\r\n            return false;\r\n         }\r\n      }\r\n   }\r\n\r\n   return true;\r\n}\r\n\r\n/**\r\n * Dispatches validation of data entry to string or array validation depending on data entry type.\r\n *\r\n * @param {object}            data - The data object to test.\r\n *\r\n * @param {string}            accessor - A string describing the entries to access.\r\n *\r\n * @param {ValidationEntry}   [entry] - A validation entry.\r\n *\r\n * @param {string}            [dataName='data'] - Optional name of data.\r\n *\r\n * @returns {boolean} True if validation passes otherwise an exception is thrown.\r\n */\r\nexport function validateEntryOrArray(data, accessor, entry, dataName = 'data')\r\n{\r\n   const dataEntry = safeAccess(data, accessor);\r\n\r\n   let result;\r\n\r\n   if (Array.isArray(dataEntry))\r\n   {\r\n      result = validateArray(data, accessor, entry, dataName);\r\n   }\r\n   else\r\n   {\r\n      result = validateEntry(data, accessor, entry, dataName);\r\n   }\r\n\r\n   return result;\r\n}\r\n\r\n// Module private ---------------------------------------------------------------------------------------------------\r\n\r\n/**\r\n * Private implementation of depth traversal.\r\n *\r\n * @param {object|Array}   data - An object or array.\r\n *\r\n * @param {string[]}       skipFreezeKeys - An array of strings indicating keys of objects to not freeze.\r\n *\r\n * @returns {*} The frozen object.\r\n * @ignore\r\n * @private\r\n */\r\nfunction _deepFreeze(data, skipFreezeKeys)\r\n{\r\n   if (Array.isArray(data))\r\n   {\r\n      for (let cntr = 0; cntr < data.length; cntr++) { _deepFreeze(data[cntr], skipFreezeKeys); }\r\n   }\r\n   else if (typeof data === 'object')\r\n   {\r\n      for (const key in data)\r\n      {\r\n         // eslint-disable-next-line no-prototype-builtins\r\n         if (data.hasOwnProperty(key) && !skipFreezeKeys.includes(key)) { _deepFreeze(data[key], skipFreezeKeys); }\r\n      }\r\n   }\r\n\r\n   return Object.freeze(data);\r\n}\r\n\r\n/**\r\n * Private implementation of depth traversal.\r\n *\r\n * @param {object|Array}   data - An object or array.\r\n *\r\n * @param {Function}       func - A callback function to process leaf values in children arrays or object members.\r\n *\r\n * @param {boolean}        modify - If true then the result of the callback function is used to modify in place\r\n *                                  the given data.\r\n *\r\n * @returns {*} The data object.\r\n * @ignore\r\n * @private\r\n */\r\nfunction _depthTraverse(data, func, modify)\r\n{\r\n   if (modify)\r\n   {\r\n      if (Array.isArray(data))\r\n      {\r\n         for (let cntr = 0; cntr < data.length; cntr++)\r\n         {\r\n            data[cntr] = _depthTraverse(data[cntr], func, modify);\r\n         }\r\n      }\r\n      else if (typeof data === 'object')\r\n      {\r\n         for (const key in data)\r\n         {\r\n            // eslint-disable-next-line no-prototype-builtins\r\n            if (data.hasOwnProperty(key)) { data[key] = _depthTraverse(data[key], func, modify); }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         data = func(data);\r\n      }\r\n   }\r\n   else\r\n   {\r\n      if (Array.isArray(data))\r\n      {\r\n         for (let cntr = 0; cntr < data.length; cntr++) { _depthTraverse(data[cntr], func, modify); }\r\n      }\r\n      else if (typeof data === 'object')\r\n      {\r\n         for (const key in data)\r\n         {\r\n            // eslint-disable-next-line no-prototype-builtins\r\n            if (data.hasOwnProperty(key)) { _depthTraverse(data[key], func, modify); }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         func(data);\r\n      }\r\n   }\r\n\r\n   return data;\r\n}\r\n\r\n/**\r\n * Private implementation of `getAccessorList`.\r\n *\r\n * @param {object}   data - An object to traverse.\r\n *\r\n * @returns {string[]} Accessor list.\r\n * @ignore\r\n * @private\r\n */\r\nfunction _getAccessorList(data)\r\n{\r\n   const accessors = [];\r\n\r\n   for (const key in data)\r\n   {\r\n      if (data.hasOwnProperty(key)) // eslint-disable-line no-prototype-builtins\r\n      {\r\n         if (typeof data[key] === 'object')\r\n         {\r\n            const childKeys = _getAccessorList(data[key]);\r\n\r\n            childKeys.forEach((childKey) =>\r\n            {\r\n               accessors.push(Array.isArray(childKey) ? `${key}.${childKey.join('.')}` : `${key}.${childKey}`);\r\n            });\r\n         }\r\n         else\r\n         {\r\n            accessors.push(key);\r\n         }\r\n      }\r\n   }\r\n\r\n   return accessors;\r\n}\r\n\r\n/**\r\n * Creates a new error of type `clazz` adding the field `_objectValidateError` set to true.\r\n *\r\n * @param {Error}    clazz - Error class to instantiate.\r\n *\r\n * @param {string}   message - An error message.\r\n *\r\n * @returns {*} Error of the clazz.\r\n * @ignore\r\n * @private\r\n */\r\nfunction _validateError(clazz, message = void 0)\r\n{\r\n   const error = new clazz(message);\r\n   error._objectValidateError = true;\r\n   return error;\r\n}\r\n","import { safeAccess, safeSet }   from \"@typhonjs-utils/object\";\nimport { derived, writable }     from \"svelte/store\";\n\nimport {\n   hasGetter,\n   isApplicationShell,\n   outroAndDestroy,\n   parseSvelteConfig }           from '@typhonjs-fvtt/svelte/util';\n\n/**\n * Provides a Svelte aware extension to Application to control the app lifecycle appropriately. You can declaratively\n * load one or more components from `defaultOptions`. For the time being please refer to this temporary demo code\n * in `typhonjs-quest-log` for examples of how to declare Svelte components.\n * {@link https://github.com/typhonjs-fvtt/typhonjs-quest-log/tree/master/src/view/demo}\n *\n * A repository of demos will be available soon.\n */\nexport class SvelteApplication extends Application\n{\n   /**\n    * Stores the first mounted component which follows the application shell contract.\n    *\n    * @type {MountedAppShell[]|null[]} Application shell.\n    */\n   #applicationShellHolder = [null];\n\n   /**\n    * Stores the target element which may not necessarily be the main element.\n    *\n    * @type {HTMLElement}\n    */\n   #elementTarget = null;\n\n   /**\n    * Stores the content element which is set for application shells.\n    *\n    * @type {HTMLElement}\n    */\n   #elementContent = null;\n\n   /**\n    * Contains the Svelte stores and reactive accessors.\n    *\n    * @type {SvelteReactive}\n    */\n   #reactive;\n\n   /**\n    * Stores SvelteData entries with instantiated Svelte components.\n    *\n    * @type {SvelteData[]}\n    */\n   #svelteData = [];\n\n   /**\n    * Provides a helper class that combines multiple methods for interacting with the mounted components tracked in\n    * {@link SvelteData}.\n    *\n    * @type {GetSvelteData}\n    */\n   #getSvelteData = new GetSvelteData(this.#applicationShellHolder, this.#svelteData);\n\n   /**\n    * Contains methods to interact with the Svelte stores.\n    *\n    * @type {SvelteStores}\n    */\n   #stores;\n\n   /**\n    * @inheritDoc\n    */\n   constructor(options)\n   {\n      super(options);\n\n      this.#reactive = new SvelteReactive(this);\n\n      this.#stores = this.#reactive.initialize();\n   }\n\n   /**\n    * Specifies the default options that SvelteApplication supports.\n    *\n    * @returns {object} options - Application options.\n    * @see https://foundryvtt.com/api/Application.html#options\n    */\n   static get defaultOptions()\n   {\n      return foundry.utils.mergeObject(super.defaultOptions, {\n         draggable: true,              // If true then application shells are draggable.\n         headerButtonNoLabel: false,   // If true then header button labels are removed for application shells.\n         jqueryCloseAnimation: true,   // If false the Foundry JQuery close animation is not run.\n         zIndex: null                  // When set the zIndex is manually controlled.\n      });\n   }\n\n   /**\n    * Returns the content element if an application shell is mounted.\n    *\n    * @returns {HTMLElement} Content element.\n    */\n   get elementContent() { return this.#elementContent; }\n\n   /**\n    * Returns the target element or main element if no target defined.\n    *\n    * @returns {HTMLElement} Target element.\n    */\n   get elementTarget() { return this.#elementTarget; }\n\n   /**\n    * Returns the reactive accessors & Svelte stores for SvelteApplication.\n    *\n    * @returns {SvelteReactive} The reactive accessors & Svelte stores.\n    */\n   get reactive() { return this.#reactive; }\n\n   /**\n    * Returns the Svelte helper class w/ various methods to access mounted Svelte components.\n    *\n    * @returns {GetSvelteData} GetSvelteData\n    */\n   get svelte() { return this.#getSvelteData; }\n\n   /**\n    * Sets the content element.\n    *\n    * @param {HTMLElement} content - Content element.\n    */\n   set elementContent(content)\n   {\n      if (!(content instanceof HTMLElement))\n      {\n         throw new TypeError(`SvelteApplication - set elementContent error: 'content' is not an HTMLElement.`);\n      }\n      this.#elementContent = content;\n   }\n\n   /**\n    * Sets the target element or main element if no target defined.\n    *\n    * @param {HTMLElement} target - Target element.\n    */\n   set elementTarget(target)\n   {\n      if (!(target instanceof HTMLElement))\n      {\n         throw new TypeError(`SvelteApplication - set elementTarget error: 'target' is not an HTMLElement.`);\n      }\n      this.#elementTarget = target;\n   }\n\n   /**\n    * Note: This method is fully overridden and duplicated as Svelte components need to be destroyed manually and the\n    * best visual result is to destroy them after the default JQuery slide up animation occurs, but before the element\n    * is removed from the DOM.\n    *\n    * If you destroy the Svelte components before the slide up animation the Svelte elements are removed immediately\n    * from the DOM. The purpose of overriding ensures the slide up animation is always completed before\n    * the Svelte components are destroyed and then the element is removed from the DOM.\n    *\n    * Close the application and un-register references to it within UI mappings.\n    * This function returns a Promise which resolves once the window closing animation concludes\n    *\n    * @param {object}   options - Optional parameters.\n    *\n    * @param {boolean}  options.force - Force close regardless of render state.\n    *\n    * @returns {Promise<void>}    A Promise which resolves once the application is closed\n    */\n   async close(options = {})\n   {\n      const states = Application.RENDER_STATES;\n      if (!options.force && ![states.RENDERED, states.ERROR].includes(this._state)) { return; }\n\n      // Unsubscribe from any local stores.\n      this.#stores.unsubscribe();\n\n      this._state = states.CLOSING;\n\n      /**\n       * Get the element.\n       *\n       * @type {JQuery}\n       */\n      const el = $(this.#elementTarget);\n      if (!el) { return this._state = states.CLOSED; }\n\n      // Dispatch Hooks for closing the base and subclass applications\n      for (const cls of this.constructor._getInheritanceChain())\n      {\n         /**\n          * A hook event that fires whenever this Application is closed.\n          *\n          * @param {Application} app                     The Application instance being closed\n          *\n          * @param {jQuery[]} html                       The application HTML when it is closed\n          *\n          * @function closeApplication\n          *\n          * @memberof hookEvents\n          */\n         Hooks.call(`close${cls.name}`, this, el);\n      }\n\n      // If options `jqueryCloseAnimation` is false then do not execute the standard JQuery slide up animation.\n      // This allows Svelte components to provide any out transition. Application shells will automatically set\n      // `jqueryCloseAnimation` based on any out transition set or unset.\n      const animate = typeof this.options.jqueryCloseAnimation === 'boolean' ? this.options.jqueryCloseAnimation : true;\n      if (animate)\n      {\n         // Await on JQuery to slide up the main element.\n         el[0].style.minHeight = '0';\n         await new Promise((resolve) => { el.slideUp(200, () => resolve()); });\n      }\n\n      // Stores the Promises returned from running outro transitions and destroying each Svelte component.\n      const svelteDestroyPromises = [];\n\n      // Manually invoke the destroy callbacks for all Svelte components.\n      for (const entry of this.#svelteData)\n      {\n         // Use `outroAndDestroy` to run outro transitions before destroying.\n         svelteDestroyPromises.push(outroAndDestroy(entry.component));\n\n         // If any proxy eventbus has been added then remove all event registrations from the component.\n         const eventbus = entry.config.eventbus;\n         if (typeof eventbus === 'object' && typeof eventbus.off === 'function')\n         {\n            eventbus.off();\n            entry.config.eventbus = void 0;\n         }\n      }\n\n      // Await all Svelte components to destroy.\n      await Promise.all(svelteDestroyPromises);\n\n      // Reset SvelteData like this to maintain reference to GetSvelteData / `this.svelte`.\n      this.#svelteData.length = 0;\n\n      // Use JQuery to remove `this._element` from the DOM. Most SvelteComponents have already removed it.\n      el.remove();\n\n      // Clean up data\n      this.#applicationShellHolder[0] = null;\n      this._element = null;\n      this.#elementContent = null;\n      this.#elementTarget = null;\n      delete ui.windows[this.appId];\n      this._minimized = false;\n      this._scrollPositions = null;\n      this._state = states.CLOSED;\n\n      // Update the minimized UI store options.\n      this.#stores.uiOptionsUpdate((storeOptions) => foundry.utils.mergeObject(storeOptions, {\n         minimized: this._minimized\n      }));\n   }\n\n   /**\n    * Inject the Svelte components defined in `this.options.svelte`. The Svelte component can attach to the existing\n    * pop-out of Application or provide no template and render into a document fragment which is then attached to the\n    * DOM.\n    *\n    * @param {JQuery} html -\n    *\n    * @inheritDoc\n    */\n   _injectHTML(html)\n   {\n      if (this.popOut && html.length === 0 && Array.isArray(this.options.svelte))\n      {\n         throw new Error(\n          'SvelteApplication - _injectHTML - A popout app with no template can only support one Svelte component.');\n      }\n\n      // Make sure the store is updated with the latest header buttons. Also allows filtering buttons before display.\n      this.reactive.updateHeaderButtons();\n\n      if (Array.isArray(this.options.svelte))\n      {\n         for (const svelteConfig of this.options.svelte)\n         {\n            const svelteData = s_LOAD_CONFIG(this, html, svelteConfig);\n\n            if (isApplicationShell(svelteData.component))\n            {\n               if (this.svelte.applicationShell !== null)\n               {\n                  throw new Error(\n                   `SvelteApplication - _injectHTML - An application shell is already mounted; offending config:\n                    ${JSON.stringify(svelteConfig)}`);\n               }\n\n               this.#applicationShellHolder[0] = svelteData.component;\n            }\n\n            this.#svelteData.push(svelteData);\n         }\n      }\n      else if (typeof this.options.svelte === 'object')\n      {\n         const svelteData = s_LOAD_CONFIG(this, html, this.options.svelte);\n\n         if (isApplicationShell(svelteData.component))\n         {\n            // A sanity check as shouldn't hit this case as only one component is being mounted.\n            if (this.svelte.applicationShell !== null)\n            {\n               throw new Error(\n                `SvelteApplication - _injectHTML - An application shell is already mounted; offending config:\n                 ${JSON.stringify(this.options.svelte)}`);\n            }\n\n            this.#applicationShellHolder[0] = svelteData.component;\n         }\n\n         this.#svelteData.push(svelteData);\n      }\n\n      // Detect if this is a synthesized DocumentFragment.\n      const isDocumentFragment = html.length && html[0] instanceof DocumentFragment;\n\n      // If any of the Svelte components mounted directly targets an HTMLElement then do not inject HTML.\n      let injectHTML = true;\n      for (const svelteData of this.#svelteData)\n      {\n         if (!svelteData.injectHTML) { injectHTML = false; break; }\n      }\n      if (injectHTML) { super._injectHTML(html); }\n\n      if (this.svelte.applicationShell !== null)\n      {\n         this._element = $(this.svelte.applicationShell.elementRoot);\n\n         // Detect if the application shell exports an `elementContent` accessor.\n         this.#elementContent = hasGetter(this.svelte.applicationShell, 'elementContent') ?\n          this.svelte.applicationShell.elementContent : null;\n\n         // Detect if the application shell exports an `elementTarget` accessor.\n         this.#elementTarget = hasGetter(this.svelte.applicationShell, 'elementTarget') ?\n          this.svelte.applicationShell.elementTarget : null;\n      }\n      else if (isDocumentFragment) // Set the element of the app to the first child element in order of Svelte components mounted.\n      {\n         for (const svelteData of this.#svelteData)\n         {\n            if (svelteData.element instanceof HTMLElement)\n            {\n               this._element = $(svelteData.element);\n               break;\n            }\n         }\n      }\n\n      // Potentially retrieve a specific target element if `selectorTarget` is defined otherwise make the target the\n      // main element.\n      if (this.#elementTarget === null)\n      {\n         const element = typeof this.options.selectorTarget === 'string' ?\n          this._element.find(this.options.selectorTarget) : this._element;\n\n         this.#elementTarget = element[0];\n      }\n\n      // TODO VERIFY THIS CHECK ESPECIALLY `this.#elementTarget.length === 0`.\n      if (this.#elementTarget === null || this.#elementTarget === void 0 || this.#elementTarget.length === 0)\n      {\n         throw new Error(`SvelteApplication - _injectHTML: Target element '${this.options.selectorTarget}' not found.`);\n      }\n\n      // Subscribe to local store handling. Defer to next clock tick for the render cycle to complete.\n      setTimeout(() => this.#stores.subscribe(), 0);\n\n      this.onSvelteMount({ element: this._element[0], elementContent: this.#elementContent, elementTarget:\n       this.#elementTarget });\n   }\n\n   /**\n    * Provides a mechanism to update the UI options store for minimized.\n    *\n    * Note: the sanity check is duplicated from {@link Application.maximize} and the store is updated _before_\n    * the actual parent method is invoked. This allows application shells to remove / show any resize handlers\n    * correctly.\n    *\n    * @inheritDoc\n    */\n   async maximize()\n   {\n      if (!this.popOut || [false, null].includes(this._minimized)) { return; }\n\n      this.#stores.uiOptionsUpdate((options) => foundry.utils.mergeObject(options, { minimized: false }));\n\n      return super.maximize();\n   }\n\n   /**\n    * Provides a mechanism to update the UI options store for minimized.\n    *\n    * Note: the sanity check is duplicated from {@link Application.minimize} and the store is updated _before_\n    * the actual parent method is invoked. This allows application shells to remove / show any resize handlers\n    * correctly.\n    *\n    * @inheritDoc\n    */\n   async minimize()\n   {\n      if (!this.rendered || !this.popOut || [true, null].includes(this._minimized)) { return; }\n\n      this.#stores.uiOptionsUpdate((options) => foundry.utils.mergeObject(options, { minimized: true }));\n\n      return super.minimize();\n   }\n\n   /**\n    * Provides a callback after all Svelte components are initialized.\n    *\n    * @param {object}      [opts] - Optional parameters.\n    *\n    * @param {HTMLElement} [opts.element] - HTMLElement container for main application element.\n    *\n    * @param {HTMLElement} [opts.elementContent] - HTMLElement container for content area of application shells.\n    *\n    * @param {HTMLElement} [opts.elementTarget] - HTMLElement container for main application target element.\n    */\n   onSvelteMount({ element, elementContent, elementTarget }) {} // eslint-disable-line no-unused-vars\n\n   /**\n    * Override replacing HTML as Svelte components control the rendering process. Only potentially change the outer\n    * application frame / title for pop-out applications.\n    *\n    * @inheritDoc\n    */\n   _replaceHTML(element, html)  // eslint-disable-line no-unused-vars\n   {\n      if (!element.length) { return; }\n\n      this.reactive.updateHeaderButtons();\n   }\n\n   /**\n    * Render the inner application content. Only render a template if one is defined otherwise provide an empty\n    * JQuery element.\n    *\n    * @param {Object} data         The data used to render the inner template\n    *\n    * @returns {Promise.<JQuery>}   A promise resolving to the constructed jQuery object\n    *\n    * @protected\n    */\n   async _renderInner(data)\n   {\n      const html = typeof this.template === 'string' ? await renderTemplate(this.template, data) :\n       document.createDocumentFragment();\n\n      return $(html);\n   }\n\n   /**\n    * Modified Application `setPosition` to support QuestTrackerApp for switchable resizable globalThis.\n    * Set the application position and store its new location.\n    *\n    * @param {object}               [opts] - Optional parameters.\n    *\n    * @param {number|null}          [opts.left] - The left offset position in pixels\n    *\n    * @param {number|null}          [opts.top] - The top offset position in pixels\n    *\n    * @param {number|null}          [opts.width] - The application width in pixels\n    *\n    * @param {number|string|null}   [opts.height] - The application height in pixels\n    *\n    * @param {number|null}          [opts.scale] - The application scale as a numeric factor where 1.0 is default\n    *\n    * @param {boolean}              [opts.noHeight] - When true no element height is modified.\n    *\n    * @param {boolean}              [opts.noWidth] - When true no element width is modified.\n    *\n    * @returns {{left: number, top: number, width: number, height: number, scale:number}}\n    * The updated position object for the application containing the new values\n    */\n   setPosition({ left, top, width, height, scale, noHeight = false, noWidth = false } = {})\n   {\n      const el = this.elementTarget;\n      const currentPosition = this.position;\n      const styles = globalThis.getComputedStyle(el);\n\n      // Update width if an explicit value is passed, or if no width value is set on the element\n      if (!el.style.width || width)\n      {\n         const tarW = width || el.offsetWidth;\n         const minW = parseInt(styles.minWidth) || MIN_WINDOW_WIDTH;\n         const maxW = el.style.maxWidth || globalThis.innerWidth;\n         currentPosition.width = width = Math.clamped(tarW, minW, maxW);\n\n         if (!noWidth) { el.style.width = `${width}px`; }\n         if ((width + currentPosition.left) > globalThis.innerWidth) { left = currentPosition.left; }\n      }\n      width = el.offsetWidth;\n\n      // Update height if an explicit value is passed, or if no height value is set on the element\n      if (!el.style.height || height)\n      {\n         const tarH = height || (el.offsetHeight + 1);\n         const minH = parseInt(styles.minHeight) || MIN_WINDOW_HEIGHT;\n         const maxH = el.style.maxHeight || globalThis.innerHeight;\n         currentPosition.height = height = Math.clamped(tarH, minH, maxH);\n\n         if (!noHeight) { el.style.height = `${height}px`; }\n         if ((height + currentPosition.top) > globalThis.innerHeight + 1) { top = currentPosition.top - 1; }\n      }\n      height = el.offsetHeight;\n\n      // Update Left\n      if ((!el.style.left) || Number.isFinite(left))\n      {\n         const tarL = Number.isFinite(left) ? left : (globalThis.innerWidth - width) / 2;\n         const maxL = Math.max(globalThis.innerWidth - width, 0);\n         currentPosition.left = left = Math.clamped(tarL, 0, maxL);\n         el.style.left = `${left}px`;\n      }\n\n      // Update Top\n      if ((!el.style.top) || Number.isFinite(top))\n      {\n         const tarT = Number.isFinite(top) ? top : (globalThis.innerHeight - height) / 2;\n         const maxT = Math.max(globalThis.innerHeight - height, 0);\n         currentPosition.top = top = Math.clamped(tarT, 0, maxT);\n         el.style.top = `${currentPosition.top}px`;\n      }\n\n      // Update Scale\n      if (scale)\n      {\n         currentPosition.scale = Math.max(scale, 0);\n         if (scale === 1) { el.style.transform = \"\"; }\n         else { el.style.transform = `scale(${scale})`; }\n      }\n\n      // Return the updated position object\n      return currentPosition;\n   }\n}\n\n/**\n * Instantiates and attaches a Svelte component to the main inserted HTML.\n *\n * @param {SvelteApplication} app - The application\n *\n * @param {JQuery}            html - The inserted HTML.\n *\n * @param {object}            config - Svelte component options\n *\n * @returns {SvelteData} The config + instantiated Svelte component.\n */\nfunction s_LOAD_CONFIG(app, html, config)\n{\n   const svelteOptions = typeof config.options === 'object' ? config.options : {};\n\n   let target;\n\n   if (config.target instanceof HTMLElement)       // A specific HTMLElement to append Svelte component.\n   {\n      target = config.target;\n   }\n   else if (typeof config.target === 'string')     // A string target defines a selector to find in existing HTML.\n   {\n      target = html.find(config.target).get(0);\n   }\n   else                                            // No target defined, create a document fragment.\n   {\n      target = document.createDocumentFragment();\n   }\n\n   if (target === void 0)\n   {\n      throw new Error(\n       `SvelteApplication - s_LOAD_CONFIG - could not find target selector: ${config.target} for config:\\n${\n        JSON.stringify(config)}`);\n   }\n\n   const NewSvelteComponent = config.class;\n\n   const svelteConfig = parseSvelteConfig({ ...config, target }, app);\n\n   const externalContext = svelteConfig.context.get('external');\n\n   // Inject the Foundry application instance as a Svelte prop.\n   externalContext.foundryApp = app;\n\n   let eventbus;\n\n   // Potentially inject any TyphonJS eventbus and track the proxy in the SvelteData instance.\n   if (typeof app._eventbus === 'object' && typeof app._eventbus.createProxy === 'function')\n   {\n      eventbus = app._eventbus.createProxy();\n      externalContext.eventbus = eventbus;\n   }\n\n   // Create the Svelte component.\n   /**\n    * @type {import('svelte').SvelteComponent}\n    */\n   const component = new NewSvelteComponent(svelteConfig);\n\n   // Set any eventbus to the config.\n   svelteConfig.eventbus = eventbus;\n\n   /**\n    * @type {HTMLElement}\n    */\n   let element;\n\n   // We can directly get the root element from components which follow the application store contract.\n   if (isApplicationShell(component))\n   {\n      element = component.elementRoot;\n   }\n\n   // Detect if target is a synthesized DocumentFragment with an child element. Child elements will be present\n   // if the Svelte component mounts and renders initial content into the document fragment.\n   if (config.target instanceof DocumentFragment && target.firstElementChild)\n   {\n      if (element === void 0) { element = target.firstElementChild; }\n      html.append(target);\n   }\n   else if (config.target instanceof HTMLElement && element === void 0)\n   {\n      if (config.target instanceof HTMLElement && typeof svelteOptions.selectorElement !== 'string')\n      {\n         throw new Error(\n          `SvelteApplication - s_LOAD_CONFIG - HTMLElement target with no 'selectorElement' defined for config:\\n${\n           JSON.stringify(config)}`);\n      }\n\n      // The target is an HTMLElement so find the Application element from `selectorElement` option.\n      element = target.querySelector(svelteOptions.selectorElement);\n\n      if (element === null || element === void 0)\n      {\n         throw new Error(\n          `SvelteApplication - s_LOAD_CONFIG - HTMLElement target - could not find 'selectorElement' for config:\\n${\n           JSON.stringify(config)}`);\n      }\n   }\n\n   // If the configuration / original target is an HTML element then do not inject HTML.\n   const injectHTML = !(config.target instanceof HTMLElement);\n\n   const result = { config: svelteConfig, component, element, injectHTML };\n\n   Object.freeze(result);\n\n   return result;\n}\n\n/**\n * Provides a helper class for {@link SvelteApplication} by combining all methods that work on the {@link SvelteData[]}\n * of mounted components. This class is instantiated and can be retrieved by the getter `svelte` via SvelteApplication.\n */\nclass GetSvelteData\n{\n   /**\n    * @type {MountedAppShell[]|null[]}\n    */\n   #applicationShellHolder;\n\n   /**\n    * @type {SvelteData[]}\n    */\n   #svelteData;\n\n   /**\n    * Keep a direct reference to the SvelteData array in an associated {@link SvelteApplication}.\n    *\n    * @param {MountedAppShell[]|null[]}  applicationShellHolder - A reference to the MountedAppShell array.\n    *\n    * @param {SvelteData[]}  svelteData - A reference to the SvelteData array of mounted components.\n    */\n   constructor(applicationShellHolder, svelteData)\n   {\n      this.#applicationShellHolder = applicationShellHolder;\n      this.#svelteData = svelteData;\n\n      Object.freeze(this);\n   }\n\n   /**\n    * Returns any mounted {@link MountedAppShell}.\n    *\n    * @returns {MountedAppShell|null} Any mounted application shell.\n    */\n   get applicationShell() { return this.#applicationShellHolder[0]; }\n\n   /**\n    * Returns the indexed Svelte component.\n    *\n    * @param {number}   index -\n    *\n    * @returns {object} The loaded Svelte component.\n    */\n   component(index)\n   {\n      const data = this.#svelteData[index];\n      return typeof data === 'object' ? data?.component : void 0;\n   }\n\n   /**\n    * Returns the Svelte component entries iterator.\n    *\n    * @returns {Generator<(number|*)[], void, *>} Svelte component entries iterator.\n    * @yields\n    */\n   *componentEntries()\n   {\n      for (let cntr = 0; cntr < this.#svelteData.length; cntr++)\n      {\n         yield [cntr, this.#svelteData[cntr].component];\n      }\n   }\n\n   /**\n    * Returns the Svelte component values iterator.\n    *\n    * @returns {Generator<*, void, *>} Svelte component values iterator.\n    * @yields\n    */\n   *componentValues()\n   {\n      for (let cntr = 0; cntr < this.#svelteData.length; cntr++)\n      {\n         yield this.#svelteData[cntr].component;\n      }\n   }\n\n   /**\n    * Returns the indexed SvelteData entry.\n    *\n    * @param {number}   index -\n    *\n    * @returns {object} The loaded Svelte config + component.\n    */\n   data(index)\n   {\n      return this.#svelteData[index];\n   }\n\n   /**\n    * Returns the SvelteData entries iterator.\n    *\n    * @returns {IterableIterator<[number, Object]>} SvelteData entries iterator.\n    */\n   dataEntries()\n   {\n      return this.#svelteData.entries();\n   }\n\n   /**\n    * Returns the SvelteData values iterator.\n    *\n    * @returns {IterableIterator<Object>} SvelteData values iterator.\n    */\n   dataValues()\n   {\n      return this.#svelteData.values();\n   }\n\n   /**\n    * Returns the length of the mounted Svelte component list.\n    *\n    * @returns {number} Length of mounted Svelte component list.\n    */\n   get length()\n   {\n      return this.#svelteData.length;\n   }\n}\n\n/**\n * Contains the reactive functionality / Svelte stores associated with SvelteApplication.\n */\nclass SvelteReactive\n{\n   /**\n    * @type {SvelteApplication}\n    */\n   #application;\n\n   /**\n    * @type {boolean}\n    */\n   #initialized = false;\n\n   /**\n    * The Application option store which is injected into mounted Svelte component context under the `external` key.\n    *\n    * @type {StoreAppOptions}\n    */\n   #storeAppOptions;\n\n   /**\n    * Stores the update function for `#storeAppOptions`.\n    *\n    * @type {import('svelte/store').Writable.update}\n    */\n   #storeAppOptionsUpdate;\n\n   /**\n    * The UI option store which is injected into mounted Svelte component context under the `external` key.\n    *\n    * @type {StoreUIOptions}\n    */\n   #storeUIOptions;\n\n   /**\n    * Stores the update function for `#storeUIOptions`.\n    *\n    * @type {import('svelte/store').Writable.update}\n    */\n   #storeUIOptionsUpdate;\n\n   /**\n    * Stores the unsubscribe functions from local store subscriptions.\n    *\n    * @type {import('svelte/store').Unsubscriber[]}\n    */\n   #storeUnsubscribe = [];\n\n   /**\n    * @param {SvelteApplication} application - The host Foundry application.\n    */\n   constructor(application)\n   {\n      this.#application = application;\n\n      Object.freeze(this);\n   }\n\n   /**\n    * Initializes reactive support. Package private for internal use.\n    *\n    * @returns {SvelteStores} Internal methods to interact with Svelte stores.\n    * @package\n    */\n   initialize()\n   {\n      if (this.#initialized) { return; }\n\n      this.#initialized = true;\n\n      this.#storesInitialize();\n\n      return {\n         appOptionsUpdate: this.#storeAppOptionsUpdate,\n         uiOptionsUpdate: this.#storeUIOptionsUpdate,\n         subscribe: this.#storesSubscribe.bind(this),\n         unsubscribe: this.#storesUnsubscribe.bind(this)\n      };\n   }\n\n   /**\n    * Returns the draggable app option.\n    *\n    * @returns {boolean} Draggable app option.\n    */\n   get draggable() { return this.#application?.options?.draggable; }\n\n   /**\n    * Returns the minimizable app option.\n    *\n    * @returns {boolean} Minimizable app option.\n    */\n   get minimizable() { return this.#application?.options?.minimizable; }\n\n   /**\n    * @inheritDoc\n    */\n   get popOut() { return this.#application.popOut; }\n\n   /**\n    * Returns the resizable option.\n    *\n    * @returns {boolean} Resizable app option.\n    */\n   get resizable() { return this.#application?.options?.resizable; }\n\n   /**\n    * Returns the store for app options.\n    *\n    * @returns {StoreAppOptions} App options store.\n    */\n   get storeAppOptions() { return this.#storeAppOptions; }\n\n   /**\n    * Returns the store for UI options.\n    *\n    * @returns {StoreUIOptions} UI options store.\n    */\n   get storeUIOptions() { return this.#storeUIOptions; }\n\n   /**\n    * Returns the title accessor from the parent Application class.\n    * TODO: Application v2; note that super.title localizes `this.options.title`; IMHO it shouldn't.\n    *\n    * @returns {string} Title.\n    */\n   get title() { return this.#application.title; }\n\n   /**\n    * Returns the zIndex app option.\n    *\n    * @returns {number} z-index app option.\n    */\n   get zIndex() { return this.#application?.options?.zIndex; }\n\n   /**\n    * Sets `this.options.draggable` which is reactive for application shells.\n    *\n    * @param {boolean}  draggable - Sets the draggable option.\n    */\n   set draggable(draggable)\n   {\n      if (typeof draggable === 'boolean') { this.setOptions('draggable', draggable); }\n   }\n\n   /**\n    * Sets `this.options.minimizable` which is reactive for application shells that are also pop out.\n    *\n    * @param {boolean}  minimizable - Sets the minimizable option.\n    */\n   set minimizable(minimizable)\n   {\n      if (typeof minimizable === 'boolean') { this.setOptions('minimizable', minimizable); }\n   }\n\n   /**\n    * Sets `this.options.popOut` which is reactive for application shells. This will add / remove this application\n    * from `ui.windows`.\n    *\n    * @param {boolean}  popOut - Sets the popOut option.\n    */\n   set popOut(popOut)\n   {\n      if (typeof popOut === 'boolean') { this.setOptions('popOut', popOut); }\n   }\n\n   /**\n    * Sets `this.options.resizable` which is reactive for application shells.\n    *\n    * @param {boolean}  resizable - Sets the resizable option.\n    */\n   set resizable(resizable)\n   {\n      if (typeof resizable === 'boolean') { this.setOptions('resizable', resizable); }\n   }\n\n   /**\n    * Sets `this.options.title` which is reactive for application shells.\n    *\n    * @param {string}   title - Application title; will be localized, so a translation key is fine.\n    */\n   set title(title)\n   {\n      if (typeof title === 'string') { this.setOptions('title', title); }\n   }\n\n   /**\n    * Sets `this.options.zIndex` which is reactive for application shells.\n    *\n    * @param {number}   zIndex - Application z-index.\n    */\n   set zIndex(zIndex)\n   {\n      this.setOptions('zIndex', Number.isInteger(zIndex) ? zIndex : null);\n   }\n\n   /**\n    * Provides a way to safely get this applications options given an accessor string which describes the\n    * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n    * to walk.\n    *\n    * // TODO DOCUMENT the accessor in more detail.\n    *\n    * @param {string}   accessor - The path / key to set. You can set multiple levels.\n    *\n    * @param {*}        [defaultValue] - A default value returned if the accessor is not found.\n    *\n    * @returns {*} Value at the accessor.\n    */\n   getOptions(accessor, defaultValue)\n   {\n      return safeAccess(this.#application.options, accessor, defaultValue);\n   }\n\n   /**\n    * Provides a way to merge `options` into this applications options and update the appOptions store.\n    *\n    * @param {object}   options - The options object to merge with `this.options`.\n    */\n   mergeOptions(options)\n   {\n      this.#storeAppOptionsUpdate((instanceOptions) => foundry.utils.mergeObject(instanceOptions, options));\n   }\n\n   /**\n    * Provides a way to safely set this applications options given an accessor string which describes the\n    * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n    * to walk.\n    *\n    * Additionally if an application shell Svelte component is mounted and exports the `appOptions` property then\n    * the application options is set to `appOptions` potentially updating the application shell / Svelte component.\n    *\n    * // TODO DOCUMENT the accessor in more detail.\n    *\n    * @param {string}   accessor - The path / key to set. You can set multiple levels.\n    *\n    * @param {*}        value - Value to set.\n    */\n   setOptions(accessor, value)\n   {\n      const success = safeSet(this.#application.options, accessor, value);\n\n      // If `this.options` modified then update the app options store.\n      if (success)\n      {\n         this.#storeAppOptionsUpdate(() => this.#application.options);\n      }\n   }\n\n   /**\n    * Initializes the Svelte stores and derived stores for the application options and UI state.\n    *\n    * While writable stores are created the update method is stored in private variables locally and derived Readable\n    * stores are provided for essential options which are commonly used.\n    *\n    * These stores are injected into all Svelte components mounted under the `external` context: `storeAppOptions` and\n    * ` storeUIOptions`.\n    */\n   #storesInitialize()\n   {\n      const writableAppOptions = writable(this.#application.options);\n\n      // Keep the update function locally, but make the store essentially readable.\n      this.#storeAppOptionsUpdate = writableAppOptions.update;\n\n      /**\n       * @type {StoreAppOptions}\n       */\n      const storeAppOptions = {\n         subscribe: writableAppOptions.subscribe,\n\n         draggable: derived(writableAppOptions, ($options, set) => set($options.draggable)),\n         minimizable: derived(writableAppOptions, ($options, set) => set($options.minimizable)),\n         popOut: derived(writableAppOptions, ($options, set) => set($options.popOut)),\n         resizable: derived(writableAppOptions, ($options, set) => set($options.resizable)),\n         title: derived(writableAppOptions, ($options, set) => set($options.title)),\n         zIndex: derived(writableAppOptions,\n          ($options, set) => set(Number.isInteger($options.zIndex) ? $options.zIndex : null))\n      };\n\n      Object.freeze(storeAppOptions);\n\n      this.#storeAppOptions = storeAppOptions;\n\n      // Create a store for UI state data.\n      const writableUIOptions = writable({\n         headerButtons: [],\n         minimized: this.#application._minimized\n      });\n\n      // Keep the update function locally, but make the store essentially readable.\n      this.#storeUIOptionsUpdate = writableUIOptions.update;\n\n      /**\n       * @type {StoreUIOptions}\n       */\n      const storeUIOptions = {\n         subscribe: writableUIOptions.subscribe,\n\n         headerButtons: derived(writableUIOptions, ($options, set) => set($options.headerButtons)),\n         minimized: derived(writableUIOptions, ($options, set) => set($options.minimized))\n      };\n\n      Object.freeze(storeUIOptions);\n\n      // Initialize the store with options set in the Application constructor.\n      this.#storeUIOptions = storeUIOptions;\n   }\n\n   /**\n    * Registers local store subscriptions for app options. `popOut` controls registering this app with `ui.windows`.\n    * `zIndex` controls the z-index style of the element root.\n    *\n    * @see SvelteApplication._injectHTML\n    */\n   #storesSubscribe()\n   {\n      // Register local subscriptions.\n      this.#storeUnsubscribe.push(this.#storeAppOptions.popOut.subscribe((value) =>\n      {\n         if (value && this.#application.rendered)\n         {\n            ui.windows[this.#application.appId] = this.#application;\n         }\n         else\n         {\n            delete ui.windows[this.#application.appId];\n         }\n      }));\n\n      // Handles directly updating the element root `z-index` style when `zIndex` changes.\n      this.#storeUnsubscribe.push(this.#storeAppOptions.zIndex.subscribe((value) =>\n      {\n         if (this.#application._element !== null) { this.#application._element[0].style.zIndex = value; }\n      }));\n   }\n\n   /**\n    * Unsubscribes from any locally monitored stores.\n    *\n    * @see SvelteApplication.close\n    */\n   #storesUnsubscribe()\n   {\n      this.#storeUnsubscribe.forEach((unsubscribe) => unsubscribe());\n      this.#storeUnsubscribe = [];\n   }\n\n   /**\n    * Updates the UI Options store with the current header buttons. You may dynamically add / remove header buttons\n    * if using an application shell Svelte component. In either overriding `_getHeaderButtons` or responding to the\n    * Hooks fired return a new button array and the uiOptions store is updated and the application shell will render\n    * the new buttons.\n    *\n    * Optionally you can set in the Foundry app options `headerButtonNoLabel` to true and labels will be removed from\n    * the header buttons.\n    */\n   updateHeaderButtons()\n   {\n      const buttons = this.#application._getHeaderButtons();\n\n      // Remove labels if this.options.headerButtonNoLabel is true;\n      if (typeof this.#application.options.headerButtonNoLabel === 'boolean' &&\n       this.#application.options.headerButtonNoLabel)\n      {\n         for (const button of buttons) { button.label = void 0; }\n      }\n\n      this.#storeUIOptionsUpdate((options) =>\n      {\n         options.headerButtons = buttons;\n         return options;\n      });\n   }\n}\n\n/**\n * @typedef {object} SvelteData\n *\n * @property {object}                           config -\n *\n * @property {import('svelte').SvelteComponent} component -\n *\n * @property {HTMLElement}                      element -\n *\n * @property {boolean}                          injectHTML -\n */\n\n/**\n * @typedef {object} SvelteStores\n *\n * @property {import('svelte/store').Writable.update} appOptionsUpdate - Update function for app options store.\n *\n * @property {Function} subscribe - Subscribes to local stores.\n *\n * @property {import('svelte/store').Writable.update} uiOptionsUpdate - Update function for UI options store.\n *\n * @property {Function} unsubscribe - Unsubscribes from local stores.\n */\n","import { DialogShell }           from '@typhonjs-fvtt/svelte/component/core';\nimport { safeAccess, safeSet }   from '@typhonjs-utils/object';\n\nimport { SvelteApplication }     from './SvelteApplication.js';\n\n/**\n * Provides a Foundry API compatible dialog alternative implemented w/ Svelte. There are several features including\n * a glasspane / modal option with various styling and transition capabilities.\n */\nexport class TJSDialog extends SvelteApplication\n{\n   /**\n    * @type {object}\n    */\n   #data;\n\n   /**\n    * @param {object}   data - Dialog data.\n    *\n    * @param {object}   options -\n    */\n   constructor(data, options)\n   {\n      super(options);\n      this.#data = data;\n   }\n\n   /**\n    * Default options\n    *\n    * @returns {object} Default options\n    */\n   static get defaultOptions()\n   {\n      return foundry.utils.mergeObject(super.defaultOptions, {\n         classes: ['dialog'],\n         width: 400,\n         svelte: {\n            class: DialogShell,\n            intro: true,\n            target: document.body,\n            props: function() { return { data: this.#data }; }\n         }\n      });\n   }\n\n   /**\n    * Returns the content field in dialog data.\n    *\n    * @returns {*} content field.\n    */\n   get content() { return this.getDialogData('content'); }\n\n   /**\n    * Returns the dialog data.\n    *\n    * @returns {object} Dialog data.\n    */\n   get data() { return this.#data; }\n\n   /**\n    * Sets the dialog data content field; this is reactive.\n    *\n    * @param {*} content - Content to set.\n    */\n   set content(content) { this.setDialogData('content', content); }\n\n   /**\n    * Sets the dialog data; this is reactive.\n    *\n    * @param {object}   data - Dialog data.\n    */\n   set data(data)\n   {\n      this.#data = data;\n\n      const component = this.svelte.applicationShell;\n      if (component?.data) { component.data = data; }\n   }\n\n   /**\n    * Implemented only for backwards compatibility w/ default Foundry {@link Dialog} API.\n    *\n    * @param {JQuery}   html - JQuery element for content area.\n    */\n   activateListeners(html)\n   {\n      super.activateListeners(html);\n\n      if (this.data.render instanceof Function) { this.data.render(this.options.jQuery ? html : html[0]); }\n   }\n\n   /**\n    * Close the dialog and un-register references to it within UI mappings.\n    * This function returns a Promise which resolves once the window closing animation concludes.\n    *\n    * @param {object}   options - Optional parameters.\n    *\n    * @param {boolean}  options.force - Force close regardless of render state.\n    *\n    * @returns {Promise<void>} A Promise which resolves once the application is closed.\n    */\n   async close(options)\n   {\n      /**\n       * Implemented only for backwards compatibility w/ default Foundry {@link Dialog} API.\n       */\n      if (this.data.close instanceof Function)\n      {\n         this.data.close(this.options.jQuery ? this.element : this.element[0]);\n      }\n\n      return super.close(options);\n   }\n\n   /**\n    * Provides a way to safely get this dialogs data given an accessor string which describes the\n    * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n    * to walk.\n    *\n    * // TODO DOCUMENT the accessor in more detail.\n    *\n    * @param {string}   accessor - The path / key to set. You can set multiple levels.\n    *\n    * @param {*}        [defaultValue] - A default value returned if the accessor is not found.\n    *\n    * @returns {*} Value at the accessor.\n    */\n   getDialogData(accessor, defaultValue)\n   {\n      return safeAccess(this.#data, accessor, defaultValue);\n   }\n\n   /**\n    * @param {object} data - Merge provided data object into Dialog data.\n    */\n   mergeDialogData(data)\n   {\n      this.data = foundry.utils.mergeObject(this.#data, data, { inplace: false });\n   }\n\n   /**\n    * Provides a way to safely set this dialogs data given an accessor string which describes the\n    * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n    * to walk.\n    *\n    * Automatically the dialog data will be updated in the associated DialogShell Svelte component.\n    *\n    * // TODO DOCUMENT the accessor in more detail.\n    *\n    * @param {string}   accessor - The path / key to set. You can set multiple levels.\n    *\n    * @param {*}        value - Value to set.\n    */\n   setDialogData(accessor, value)\n   {\n      const success = safeSet(this.#data, accessor, value);\n\n      // If `this.options` modified then update the app options store.\n      if (success)\n      {\n         const component = this.svelte.component(0);\n         if (component?.data) { component.data = this.#data; }\n      }\n   }\n\n   // ---------------------------------------------------------------------------------------------------------------\n\n   /**\n    * A helper factory method to create simple confirmation dialog windows which consist of simple yes/no prompts.\n    * If you require more flexibility, a custom Dialog instance is preferred.\n    *\n    * @param {TJSConfirmConfig} config - Confirm dialog options.\n    *\n    * @returns {Promise<*>} A promise which resolves once the user makes a choice or closes the window.\n    *\n    * @example\n    * let d = Dialog.confirm({\n    *  title: \"A Yes or No Question\",\n    *  content: \"<p>Choose wisely.</p>\",\n    *  yes: () => console.log(\"You chose ... wisely\"),\n    *  no: () => console.log(\"You chose ... poorly\"),\n    *  defaultYes: false\n    * });\n    */\n   static async confirm({ title, content, yes, no, render, defaultYes = true, rejectClose = false, options = {},\n    buttons = {}, draggable = true, modal = false, modalOptions = {}, popOut = true, resizable = false, transition = {},\n     zIndex } = {})\n   {\n      // Allow overwriting of default icon and labels.\n      const mergedButtons = foundry.utils.mergeObject({\n         yes: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: game.i18n.localize('Yes')\n         },\n         no: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: game.i18n.localize('No'),\n         }\n      }, buttons);\n\n      return new Promise((resolve, reject) =>\n      {\n         const dialog = new this({\n            title,\n            content,\n            render,\n            draggable,\n            modal,\n            modalOptions,\n            popOut,\n            resizable,\n            zIndex,\n            transition,\n            buttons: foundry.utils.mergeObject(mergedButtons, {\n               yes: {\n                  callback: (html) =>\n                  {\n                     const result = yes ? yes(html) : true;\n                     resolve(result);\n                  }\n               },\n               no: {\n                  callback: (html) =>\n                  {\n                     const result = no ? no(html) : false;\n                     resolve(result);\n                  }\n               }\n            }),\n            default: defaultYes ? \"yes\" : \"no\",\n            close: () =>\n            {\n               if (rejectClose) { reject('The confirmation Dialog was closed without a choice being made.'); }\n               else { resolve(null); }\n            },\n         }, options);\n         dialog.render(true);\n      });\n   }\n\n   /**\n    * A helper factory method to display a basic \"prompt\" style Dialog with a single button\n    *\n    * @param {TJSPromptConfig} config - Prompt dialog options.\n    *\n    * @returns {Promise<*>} The returned value from the provided callback function, if any\n    */\n   static async prompt({ title, content, label, callback, render, rejectClose = false, options = {}, draggable = true,\n    icon = '<i class=\"fas fa-check\"></i>', modal = false, modalOptions = {}, popOut = true, resizable = false,\n     transition = {}, zIndex } = {})\n   {\n      return new Promise((resolve, reject) =>\n      {\n         const dialog = new this({\n            title,\n            content,\n            render,\n            draggable,\n            modal,\n            modalOptions,\n            popOut,\n            resizable,\n            transition,\n            zIndex,\n            buttons: {\n               ok: {\n                  icon,\n                  label,\n                  callback: (html) =>\n                  {\n                     const result = callback ? callback(html) : null;\n                     resolve(result);\n                  }\n               },\n            },\n            default: 'ok',\n            close: () =>\n            {\n               if (rejectClose)\n               {\n                  reject(new Error('The Dialog prompt was closed without being accepted.'));\n               }\n               else { resolve(null); }\n            },\n         }, options);\n         dialog.render(true);\n      });\n   }\n}\n\n/**\n * @typedef TJSConfirmConfig - Configuration options for the confirm dialog.\n *\n * @property {string}   title - The confirmation window title\n *\n * @property {string}   content - The confirmation message\n *\n * @property {Function} [yes] - Callback function upon yes\n *\n * @property {Function} [no] - Callback function upon no\n *\n * @property {Function} [render] - A function to call when the dialog is rendered\n *\n * @property {boolean}  [defaultYes=true] - Make \"yes\" the default choice?\n *\n * @property {boolean}  [rejectClose=false] - Reject the Promise if the Dialog is closed without making a choice.\n *\n * @property {object}   [options={}] - Additional rendering options passed to the Dialog\n *\n * @property {object}   [buttons={}] - Provides a button override that is merged with default buttons.\n *\n * @property {boolean}  [draggable=true] - The dialog is draggable when true.\n *\n * @property {boolean}  [modal=false] - When true a modal dialog is displayed.\n *\n * @property {object}   [modalOptions] - Additional options for modal dialog display.\n *\n * @property {boolean}  [popOut=true] - When true the dialog is a pop out Application.\n *\n * @property {boolean}  [resizable=false] - When true the dialog is resizable.\n *\n * @property {object}   [transition] - Transition options for the dialog.\n *\n * @property {number|null} [zIndex] - A specific z-index for the dialog. *\n */\n\n/**\n * @typedef TJSPromptConfig - Configuration options for the confirm dialog.\n *\n * @property {string}   title - The confirmation window title\n *\n * @property {string}   content - The confirmation message\n *\n * @property {string}   [label] - The confirmation button text.\n *\n * @property {Function} [callback] - A callback function to fire when the button is clicked.\n *\n * @property {Function} [render] - A function to call when the dialog is rendered.\n *\n * @property {boolean}  [rejectClose=false] - Reject the Promise if the Dialog is closed without making a choice.\n *\n * @property {object}   [options={}] - Additional rendering options passed to the Dialog\n *\n * @property {boolean}  [draggable=true] - The dialog is draggable when true.\n *\n * @property {string}   [icon='<i class=\"fas fa-check\"></i>'] - Set another icon besides `fa-check` for button.\n *\n * @property {boolean}  [modal=false] - When true a modal dialog is displayed.\n *\n * @property {object}   [modalOptions] - Additional options for modal dialog display.\n *\n * @property {boolean}  [popOut=true] - When true the dialog is a pop out Application.\n *\n * @property {boolean}  [resizable=false] - When true the dialog is resizable.\n *\n * @property {object}   [transition] - Transition options for the dialog.\n *\n * @property {number|null} [zIndex] - A specific z-index for the dialog. *\n */\n","import { TJSContextMenu }  from '@typhonjs-fvtt/svelte/component/core';\n\n/**\n * Provides game wide menu functionality.\n */\nexport class TJSMenu\n{\n   /**\n    * Stores any active context menu.\n    */\n   static #contextMenu = void 0;\n\n   /**\n    * Creates and manages a game wide context menu.\n    *\n    * @param {object}   opts - Optional parameters.\n    *\n    * @param {string}   [opts.id] - A custom CSS ID to add to the menu.\n    *\n    * @param {number}   opts.x - X position for the top / left of the menu.\n    *\n    * @param {number}   opts.y - Y position for the top / left of the menu.\n    *\n    * @param {object[]} opts.items - Menu items to display.\n    *\n    * @param {number}   [opts.zIndex=10000] - Z-index for context menu.\n    *\n    * @param {...*}     [opts.transitionOptions] - The rest of opts defined the slideFade transition options.\n    */\n   static createContext({ id = '', x = 0, y = 0, items = [], zIndex = 10000, ...transitionOptions } = {})\n   {\n      if (this.#contextMenu !== void 0) { return; }\n\n      // Create the new context menu with the last click x / y point.\n      this.#contextMenu = new TJSContextMenu({\n         target: document.body,\n         intro: true,\n         props: { id, x, y, items, zIndex, transitionOptions: { duration: 200, ...transitionOptions } }\n      });\n\n      // Register an event listener to remove any active context menu if closed from a menu selection or pointer\n      // down event to `document.body`.\n      this.#contextMenu.$on('close', () => { this.#contextMenu = void 0; });\n   }\n}\n"],"names":["safeAccess","data","accessor","defaultValue","access","split","cntr","length","safeSet","value","operation","createMissing","TypeError","Array","isArray","number","Number","isInteger","SvelteApplication","Application","constructor","options","GetSvelteData","this","SvelteReactive","_classPrivateFieldGet","initialize","defaultOptions","foundry","utils","mergeObject","super","draggable","headerButtonNoLabel","jqueryCloseAnimation","zIndex","elementContent","elementTarget","reactive","svelte","content","HTMLElement","target","states","RENDER_STATES","force","RENDERED","ERROR","includes","_state","unsubscribe","CLOSING","el","$","CLOSED","cls","_getInheritanceChain","Hooks","call","name","style","minHeight","Promise","resolve","slideUp","svelteDestroyPromises","entry","push","outroAndDestroy","component","eventbus","config","off","all","remove","_element","ui","windows","appId","_minimized","_scrollPositions","uiOptionsUpdate","storeOptions","minimized","_injectHTML","html","popOut","Error","updateHeaderButtons","svelteConfig","svelteData","s_LOAD_CONFIG","isApplicationShell","applicationShell","JSON","stringify","isDocumentFragment","DocumentFragment","injectHTML","elementRoot","hasGetter","element","selectorTarget","find","setTimeout","subscribe","onSvelteMount","maximize","rendered","minimize","_replaceHTML","template","renderTemplate","document","createDocumentFragment","setPosition","left","top","width","height","scale","noHeight","noWidth","currentPosition","position","styles","globalThis","getComputedStyle","tarW","offsetWidth","minW","parseInt","minWidth","MIN_WINDOW_WIDTH","maxW","maxWidth","innerWidth","Math","clamped","tarH","offsetHeight","minH","MIN_WINDOW_HEIGHT","maxH","maxHeight","innerHeight","isFinite","tarL","maxL","max","tarT","maxT","transform","app","svelteOptions","get","NewSvelteComponent","class","parseSvelteConfig","externalContext","context","foundryApp","_eventbus","createProxy","firstElementChild","append","selectorElement","querySelector","result","Object","freeze","applicationShellHolder","index","dataEntries","entries","dataValues","values","application","appOptionsUpdate","_classPrivateMethodGet","bind","_classPrivateFieldGet2","_classPrivateFieldGet3","minimizable","_classPrivateFieldGet4","_classPrivateFieldGet5","resizable","_classPrivateFieldGet6","_classPrivateFieldGet7","storeAppOptions","storeUIOptions","title","_classPrivateFieldGet8","_classPrivateFieldGet9","setOptions","getOptions","mergeOptions","instanceOptions","buttons","_getHeaderButtons","button","label","headerButtons","writableAppOptions","writable","update","derived","$options","set","writableUIOptions","forEach","TJSDialog","classes","DialogShell","intro","body","props","getDialogData","setDialogData","activateListeners","render","Function","jQuery","close","mergeDialogData","inplace","yes","no","defaultYes","rejectClose","modal","modalOptions","transition","mergedButtons","icon","game","i18n","localize","reject","callback","default","ok","TJSMenu","_ref","id","x","y","items","transitionOptions","_classStaticPrivateFieldSpecGet","TJSContextMenu","duration","$on"],"mappings":"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"}