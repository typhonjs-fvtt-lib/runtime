{"version":3,"file":"action.js","sources":["../node_modules/@typhonjs-fvtt/svelte/src/action/draggable.js"],"sourcesContent":["/**\r\n * Provides an action to enable pointer dragging of an HTMLElement and invoke `setPosition` on given Positionable\r\n * object provided. When the attached boolean store state changes the draggable action is enabled or disabled.\r\n *\r\n * @param {HTMLElement}       node - The node associated with the action.\r\n *\r\n * @param {object}            params - Required parameters.\r\n *\r\n * @param {Positionable}      params.positionable - A positionable object.\r\n *\r\n * @param {Readable<boolean>} params.booleanStore - A Svelte store that contains a boolean.\r\n *\r\n * @returns {{update: Function, destroy: Function}} The action lifecycle methods.\r\n */\r\nexport function draggable(node, { positionable, booleanStore })\r\n{\r\n   /**\r\n    * Duplicate the app / Positionable starting position to track differences.\r\n    *\r\n    * @type {object}\r\n    */\r\n   let position = null;\r\n\r\n   /**\r\n    * Stores the initial X / Y on drag down.\r\n    *\r\n    * @type {object}\r\n    */\r\n   let initialPosition = {};\r\n\r\n   /**\r\n    * Throttle mousemove event handling to 60fps\r\n    *\r\n    * @type {number}\r\n    */\r\n   let moveTime = 0;\r\n\r\n   /**\r\n    * Stores the active state and is used to cut off any active dragging when the store value changes.\r\n    *\r\n    * @type {Readable<boolean>}\r\n    */\r\n   let active = booleanStore;\r\n\r\n   /**\r\n    * Remember event handlers associated with this action so they may be later unregistered.\r\n    *\r\n    * @type {object}\r\n    */\r\n   const handlers = {\r\n      dragDown: ['pointerdown', (e) => onDragPointerDown(e), false],\r\n      dragMove: ['pointermove', (e) => onDragPointerMove(e), false],\r\n      dragUp: ['pointerup', (e) => onDragPointerUp(e), false]\r\n   };\r\n\r\n   /**\r\n    * Activates listeners.\r\n    */\r\n   function activateListeners()\r\n   {\r\n      active = true;\r\n\r\n      // Drag handlers\r\n      node.addEventListener(...handlers.dragDown);\r\n      node.classList.add('draggable');\r\n   }\r\n\r\n   /**\r\n    * Removes listeners.\r\n    */\r\n   function removeListeners()\r\n   {\r\n      active = false;\r\n\r\n      // Drag handlers\r\n      node.removeEventListener(...handlers.dragDown);\r\n      node.removeEventListener(...handlers.dragMove);\r\n      node.removeEventListener(...handlers.dragUp);\r\n      node.classList.remove('draggable');\r\n   }\r\n\r\n   if (active)\r\n   {\r\n      activateListeners();\r\n   }\r\n\r\n   /**\r\n    * Handle the initial pointer down which activates dragging behavior for the positionable.\r\n    *\r\n    * @param {PointerEvent} event - The pointer down event.\r\n    */\r\n   function onDragPointerDown(event)\r\n   {\r\n      event.preventDefault();\r\n\r\n      // Record initial position\r\n      position = foundry.utils.duplicate(positionable.position);\r\n      initialPosition = { x: event.clientX, y: event.clientY };\r\n\r\n      // Add temporary handlers\r\n      globalThis.addEventListener(...handlers.dragMove);\r\n      globalThis.addEventListener(...handlers.dragUp);\r\n   }\r\n\r\n   /**\r\n    * Move the positionable.\r\n    *\r\n    * @param {PointerEvent} event - The pointer move event.\r\n    */\r\n   function onDragPointerMove(event)\r\n   {\r\n      event.preventDefault();\r\n\r\n      if (!active) { return; }\r\n\r\n      // Limit dragging to 60 updates per second\r\n      const now = Date.now();\r\n\r\n      if ((now - moveTime) < (1000 / 60)) { return; }\r\n\r\n      moveTime = now;\r\n\r\n      // Update application position\r\n      positionable.setPosition({\r\n         left: position.left + (event.clientX - initialPosition.x),\r\n         top: position.top + (event.clientY - initialPosition.y)\r\n      });\r\n   }\r\n\r\n   /**\r\n    * Conclude the dragging behavior when the mouse is release, setting the final position and removing listeners\r\n    *\r\n    * @param {PointerEvent} event - The pointer up event.\r\n    */\r\n   function onDragPointerUp(event)\r\n   {\r\n      event.preventDefault();\r\n      globalThis.removeEventListener(...handlers.dragMove);\r\n      globalThis.removeEventListener(...handlers.dragUp);\r\n   }\r\n\r\n   return {\r\n      update: ({ booleanStore }) =>  // eslint-disable-line no-shadow\r\n      {\r\n         if (booleanStore) { activateListeners(); }\r\n         else { removeListeners(); }\r\n      },\r\n\r\n      destroy: () => removeListeners()\r\n   };\r\n}"],"names":["position","initialPosition","moveTime","active","booleanStore","handlers","dragDown","e","onDragPointerDown","event","preventDefault","foundry","utils","duplicate","positionable","x","clientX","y","clientY","globalThis","addEventListener","dragMove","dragUp","now","Date","setPosition","left","top","onDragPointerMove","removeEventListener","activateListeners","node","classList","add","removeListeners","remove","update","destroy"],"mappings":"kDAqBOA,EAAW,KAOXC,EAAkB,GAOlBC,EAAW,EAOXC,EAASC,QAOPC,EAAW,CACdC,SAAU,CAAC,cAAgBC,IAAMC,OAyCTC,EAzC2BF,GA2C7CG,iBAGNV,EAAWW,QAAQC,MAAMC,UAAUC,EAAad,UAChDC,EAAkB,CAAEc,EAAGN,EAAMO,QAASC,EAAGR,EAAMS,SAG/CC,WAAWC,oBAAoBf,EAASgB,eACxCF,WAAWC,oBAAoBf,EAASiB,YAVhBb,IAzC+B,GACvDY,SAAU,CAAC,cAAgBd,YA0DHE,MAExBA,EAAMC,kBAEDP,eAGCoB,EAAMC,KAAKD,MAEZA,EAAMrB,EAAa,IAAO,KAE/BA,EAAWqB,EAGXT,EAAaW,YAAY,CACtBC,KAAM1B,EAAS0B,MAAQjB,EAAMO,QAAUf,EAAgBc,GACvDY,IAAK3B,EAAS2B,KAAOlB,EAAMS,QAAUjB,EAAgBgB,MA1EvBW,CAAkBrB,IAAI,GACvDe,OAAQ,CAAC,YAAcf,IAAsBA,EAoFvCG,iBACNS,WAAWU,uBAAuBxB,EAASgB,eAC3CF,WAAWU,uBAAuBxB,EAASiB,UAtFM,aAM3CQ,IAEN3B,GAAS,EAGT4B,EAAKX,oBAAoBf,EAASC,UAClCyB,EAAKC,UAAUC,IAAI,sBAMbC,IAEN/B,GAAS,EAGT4B,EAAKF,uBAAuBxB,EAASC,UACrCyB,EAAKF,uBAAuBxB,EAASgB,UACrCU,EAAKF,uBAAuBxB,EAASiB,QACrCS,EAAKC,UAAUG,OAAO,oBAGrBhC,GAED2B,IA0DI,CACJM,OAAQ,EAAGhC,aAAAA,MAEJA,EAAgB0B,IACbI,KAGVG,QAAS,IAAMH"}