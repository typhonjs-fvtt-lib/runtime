{"version":3,"file":"index.js","sources":["../../../src/component/core/TJSContainer.svelte","../../../src/component/core/TJSComponentShell.svelte","../../../src/component/core/TJSGlassPane.svelte","../../../src/component/core/application/TJSHeaderButton.svelte","../../../src/component/core/application/TJSApplicationHeader.svelte","../../../src/component/core/application/ResizableHandle.svelte","../../../src/component/core/application/ApplicationShell.svelte","../../../src/component/core/application/TJSApplicationShell.svelte","../../../src/component/core/contextmenu/TJSContextMenu.svelte","../../../src/component/core/dialog/DialogContent.svelte","../../../src/component/core/dialog/DialogShell.svelte"],"sourcesContent":["<script lang=\"ts\">\r\n   import { SvelteComponent } from 'svelte';\r\n\r\n   export let warn: boolean = false;\r\n   export let children: SvelteComponent[] | void = void 0;\r\n</script>\r\n\r\n<svelte:options accessors={true}/>\r\n\r\n{#if Array.isArray(children)}\r\n    {#each children as child}\r\n        <svelte:component this={child.class} {...child.props} />\r\n    {/each}\r\n{:else if warn}\r\n    <p>Container warning: No children.</p>\r\n{/if}\r\n\r\n<style>\r\n    p {\r\n        color: red;\r\n        font-size: 18px;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    import {getContext, SvelteComponent} from 'svelte';\r\n\r\n   import TJSContainer      from './TJSContainer.svelte';\r\n\r\n   import type { ContextExternal } from \"@typhonjs-fvtt/svelte/component/core/types.js\";\r\n\r\n   // The children array can be specified by a parent via prop or is read below from the external context.\r\n   export let children: SvelteComponent[] | void = void 0\r\n\r\n   const context = getContext<ContextExternal>('external');\r\n\r\n   // This component can host multiple children defined via props or in the TyphonJS SvelteData configuration object\r\n   // that are potentially mounted in the content area. If no children defined then this component mounts any slotted\r\n   // child.\r\n   const allChildren = Array.isArray(children) ? children :\r\n    typeof context === 'object' ? context.children : void 0;\r\n</script>\r\n\r\n<svelte:options accessors={true}/>\r\n\r\n<TJSContainer children={allChildren} warn={true} />\r\n","<script lang=\"ts\">\r\n   import {\r\n      s_DEFAULT_TRANSITION,\r\n      s_DEFAULT_TRANSITION_OPTIONS }   from '@typhonjs-fvtt/svelte/transition';\r\n\r\n   export let id: string = void 0;\r\n   export let zIndex: number | null = Number.MAX_SAFE_INTEGER;\r\n   export let background: string = '#50505080';\r\n   export let captureInput: boolean = true;\r\n   export let preventDefault: boolean = true;\r\n   export let stopPropagation: boolean = true;\r\n\r\n   let glassPane: HTMLElement;\r\n\r\n   $: if (glassPane)\r\n   {\r\n      glassPane.style.maxWidth = '100%';\r\n      glassPane.style.maxHeight = '100%';\r\n      glassPane.style.width = '100%';\r\n      glassPane.style.height = '100%';\r\n   }\r\n\r\n   $: if (glassPane)\r\n   {\r\n      if (captureInput) { glassPane.focus(); }\r\n      glassPane.style.pointerEvents = captureInput ? 'auto' : 'none';\r\n   }\r\n\r\n   $: if (glassPane) { glassPane.style.background = background; }\r\n   $: if (glassPane)\r\n   {\r\n      // TODO TYPE: this probably has to be a string;\r\n      // @ts-ignore\r\n      glassPane.style.zIndex = zIndex;\r\n   }\r\n\r\n   // ---------------------------------------------------------------------------------------------------------------\r\n\r\n   // The following block is somewhat complex, but allows transition options to be updated reactively during\r\n   // runtime execution.\r\n\r\n   // Exports properties to set a transition w/ in / out options.\r\n   export let transition: Function = void 0;\r\n   export let inTransition: Function = s_DEFAULT_TRANSITION;\r\n   export let outTransition: Function = s_DEFAULT_TRANSITION;\r\n\r\n   // Exports properties to set options for any transitions.\r\n   export let transitionOptions: object = void 0;\r\n   export let inTransitionOptions: object = s_DEFAULT_TRANSITION_OPTIONS;\r\n   export let outTransitionOptions: object = s_DEFAULT_TRANSITION_OPTIONS;\r\n\r\n   // Tracks last transition state.\r\n   let oldTransition: Function = void 0;\r\n   let oldTransitionOptions: object = void 0\r\n\r\n   // Run this reactive block when the last transition state is not equal to the current state.\r\n   $: if (oldTransition !== transition)\r\n   {\r\n      // If transition is defined and not the default transition then set it to both in and out transition otherwise\r\n      // set the default transition to both in & out transitions.\r\n      const newTransition: Function = s_DEFAULT_TRANSITION !== transition && typeof transition === 'function' ?\r\n       transition : s_DEFAULT_TRANSITION;\r\n\r\n      inTransition = newTransition;\r\n      outTransition = newTransition;\r\n\r\n      oldTransition = newTransition;\r\n   }\r\n\r\n   // Run this reactive block when the last transition options state is not equal to the current options state.\r\n   $: if (oldTransitionOptions !== transitionOptions)\r\n   {\r\n      const newOptions: object = transitionOptions !== s_DEFAULT_TRANSITION_OPTIONS &&\r\n       typeof transitionOptions === 'object' ? transitionOptions : s_DEFAULT_TRANSITION_OPTIONS;\r\n\r\n      inTransitionOptions = newOptions;\r\n      outTransitionOptions = newOptions;\r\n\r\n      oldTransitionOptions = newOptions;\r\n   }\r\n\r\n   // Handle cases if inTransition is unset; assign noop default transition function.\r\n   $: if (typeof inTransition !== 'function') { inTransition = s_DEFAULT_TRANSITION; }\r\n\r\n   // Handle cases if outTransition is unset; assign noop default transition function.\r\n   $: if (typeof outTransition !== 'function') { outTransition = s_DEFAULT_TRANSITION; }\r\n\r\n   // Handle cases if inTransitionOptions is unset; assign empty default transition options.\r\n   $: if (typeof inTransitionOptions !== 'object') { inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\r\n\r\n   // Handle cases if outTransitionOptions is unset; assign empty default transition options.\r\n   $: if (typeof outTransitionOptions !== 'object') { outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\r\n\r\n   // ---------------------------------------------------------------------------------------------------------------\r\n\r\n   function swallow(event)\r\n   {\r\n      if (captureInput)\r\n      {\r\n         if (preventDefault) { event.preventDefault(); }\r\n         if (stopPropagation) { event.stopPropagation(); }\r\n      }\r\n   }\r\n</script>\r\n\r\n<svelte:options accessors={true}/>\r\n\r\n<div id={id}\r\n     bind:this={glassPane}\r\n     tabindex=0\r\n     class=tjs-glass-pane\r\n     in:inTransition={inTransitionOptions}\r\n     out:outTransition={outTransitionOptions}\r\n     on:keydown={swallow}>\r\n   <slot />\r\n</div>\r\n\r\n<style>\r\n   .tjs-glass-pane {\r\n      position: absolute;\r\n      overflow: inherit;\r\n   }\r\n</style>\r\n","<script lang=\"ts\">\r\n   import type { HeaderButton } from '@typhonjs-fvtt/svelte/component/core/types.js';\r\n\r\n   /**\r\n    * Provides an app header button conforming to the Foundry {@link ApplicationHeaderButton} type. Additionally, a\r\n    * `title` field is supported to give a tool tip for the button. The `onclick` function if defined is invoked when\r\n    * the button is clicked and state is updated accordingly.\r\n    */\r\n   import { localize }  from '@typhonjs-fvtt/svelte/helper';\r\n\r\n   export let button: HeaderButton;\r\n\r\n   function onClick()\r\n   {\r\n      if (typeof button.onclick === 'function')\r\n      {\r\n         button.onclick.call(button);\r\n         button = button;\r\n      }\r\n   }\r\n</script>\r\n\r\n<svelte:options accessors={true}/>\r\n\r\n<a on:click={onClick} class=\"header-button {button.class}\">\r\n    <i class={button.icon} title={localize(button.title)}></i>{localize(button.label)}\r\n</a>\r\n","<script lang=\"ts\">\r\n   import { getContext }   from 'svelte';\r\n\r\n   import { draggable }    from '@typhonjs-fvtt/svelte/action';\r\n   import { localize }     from '@typhonjs-fvtt/svelte/helper';\r\n\r\n   import TJSHeaderButton  from './TJSHeaderButton.svelte';\r\n\r\n   import type { Readable }         from 'svelte/store';\r\n   import type { ContextExternal }  from '@typhonjs-fvtt/svelte/component/core/types';\r\n\r\n   const context: ContextExternal = getContext<ContextExternal>('external');\r\n   const foundryApp = context.foundryApp;\r\n\r\n   const bringToTop = () =>\r\n   {\r\n      if (typeof foundryApp.options.popOut === 'boolean' && foundryApp.options.popOut)\r\n      {\r\n         foundryApp.bringToTop.call(foundryApp);\r\n      }\r\n   }\r\n\r\n   const storeTitle = context.storeAppOptions.title;\r\n   const storeDraggable = context.storeAppOptions.draggable;\r\n   const storeHeaderButtons = context.storeUIOptions.headerButtons;\r\n   const storeMinimizable = context.storeAppOptions.minimizable;\r\n\r\n   function minimizable(node: HTMLElement, booleanStore: Readable<boolean>)\r\n   {\r\n      const callback: Function = foundryApp._onToggleMinimize.bind(foundryApp);\r\n\r\n      function activateListeners() { node.addEventListener('dblclick', callback); }\r\n      function removeListeners() { node.removeEventListener('dblclick', callback); }\r\n\r\n      if (booleanStore) { activateListeners(); }\r\n\r\n      return {\r\n         update: (booleanStore) =>  // eslint-disable-line no-shadow\r\n         {\r\n            if (booleanStore) { activateListeners(); }\r\n            else { removeListeners(); }\r\n         },\r\n\r\n         destroy: () => removeListeners()\r\n      };\r\n   }\r\n</script>\r\n\r\n<header class=\"window-header flexrow\"\r\n        on:pointerdown={bringToTop}\r\n        use:draggable={{ positionable: foundryApp, booleanStore: $storeDraggable }}\r\n        use:minimizable={$storeMinimizable}>\r\n    <h4 class=window-title>{localize($storeTitle)}</h4>\r\n    {#each $storeHeaderButtons as button}\r\n        <TJSHeaderButton {button}/>\r\n    {/each}\r\n</header>\r\n","<script lang=\"ts\">\r\n   import { getContext } from 'svelte';\r\n   import type {Readable, Writable} from \"svelte/store\";\r\n\r\n   export let isResizable: boolean = false;\r\n\r\n   const context = getContext('external');\r\n\r\n   // Allows retrieval of the element root at runtime.\r\n   const getElementRoot = getContext<() => HTMLElement>('getElementRoot');\r\n\r\n   const foundryApp = context.foundryApp;\r\n   const storeResizable = context.storeAppOptions.resizable;\r\n   const storeMinimized = context.storeUIOptions.minimized;\r\n\r\n   let elementResize: HTMLElement;\r\n\r\n   $: if (elementResize)\r\n   {\r\n      // Instead of creating a derived store it is easier to use isResizable and the minimized store below.\r\n      elementResize.style.display = isResizable && !$storeMinimized ? 'block' : 'none';\r\n\r\n      // Add / remove `resizable` class from element root.\r\n      const elementRoot: HTMLElement = getElementRoot();\r\n      if (elementRoot) { elementRoot.classList[isResizable ? 'add' : 'remove']('resizable'); }\r\n   }\r\n\r\n   /**\r\n    * Provides an action to handle resizing the application shell based on the resizable app option.\r\n    *\r\n    * @param {HTMLElement}       node - The node associated with the action.\r\n    *\r\n    * @param {Readable<boolean>} booleanStore - A Svelte store that contains a boolean.\r\n    *\r\n    * @returns {{update: Function, destroy: Function}} The action lifecycle methods.\r\n    */\r\n   function resizable(node: HTMLElement, booleanStore: Writable<boolean>)\r\n   {\r\n      /**\r\n       * Duplicate the app / Positionable starting position to track differences.\r\n       *\r\n       * @type {object}\r\n       */\r\n      let position: Application.Position = null;\r\n\r\n      /**\r\n       * Stores the initial X / Y on drag down.\r\n       *\r\n       * @type {object}\r\n       */\r\n      let initialPosition: Application.Position = {};\r\n\r\n      /**\r\n       * Throttle mousemove event handling to 60fps\r\n       *\r\n       * @type {number}\r\n       */\r\n      let moveTime: number = 0;\r\n\r\n      /**\r\n       * Stores the active state and is used to cut off any active resizing when the store value changes.\r\n       *\r\n       * @type {boolean}\r\n       */\r\n      let active = booleanStore;\r\n\r\n      /**\r\n       * Remember event handlers associated with this action so they may be later unregistered.\r\n       *\r\n       * @type {Object}\r\n       */\r\n      const handlers = {\r\n         resizeDown: ['pointerdown', (e) => onResizePointerDown(e), false],\r\n         resizeMove: ['pointermove', (e) => onResizePointerMove(e), false],\r\n         resizeUp: ['pointerup', (e) => onResizePointerUp(e), false]\r\n      };\r\n\r\n      /**\r\n       * Activates listeners.\r\n       */\r\n      function activateListeners()\r\n      {\r\n         active = true;\r\n\r\n         // Resize handlers\r\n         node.addEventListener(...handlers.resizeDown);\r\n\r\n         isResizable = true;\r\n\r\n         node.style.display = 'block';\r\n      }\r\n\r\n      /**\r\n       * Removes listeners.\r\n       */\r\n      function removeListeners()\r\n      {\r\n         active = false;\r\n\r\n         // Resize handlers\r\n         node.removeEventListener(...handlers.resizeDown);\r\n         node.removeEventListener(...handlers.resizeMove);\r\n         node.removeEventListener(...handlers.resizeUp);\r\n\r\n         node.style.display = 'none';\r\n\r\n         isResizable = false;\r\n      }\r\n\r\n      // On mount if resizable is true then activate listeners otherwise set element display to `none`.\r\n      if (active)\r\n      {\r\n         activateListeners();\r\n      }\r\n      else\r\n      {\r\n         node.style.display = 'none';\r\n      }\r\n\r\n      /**\r\n       * Handle the initial mouse click which activates dragging behavior for the application\r\n       * @private\r\n       */\r\n      function onResizePointerDown(event)\r\n      {\r\n         event.preventDefault();\r\n\r\n         // Limit dragging to 60 updates per second\r\n         const now = Date.now();\r\n\r\n         if ((now - moveTime) < (1000 / 60)) { return; }\r\n\r\n         moveTime = now;\r\n\r\n         // Record initial position\r\n         position = foundry.utils.duplicate(foundryApp.position);\r\n\r\n         if (position.height === 'auto') { position.height = getElementRoot().clientHeight; }\r\n         if (position.width === 'auto') { position.width = getElementRoot().clientWidth; }\r\n\r\n         initialPosition = { x: event.clientX, y: event.clientY };\r\n\r\n         // Add temporary handlers\r\n         globalThis.addEventListener(...handlers.resizeMove);\r\n         globalThis.addEventListener(...handlers.resizeUp);\r\n      }\r\n\r\n      /**\r\n       * Move the window with the mouse, bounding the movement to ensure the window stays within bounds of the viewport\r\n       * @private\r\n       */\r\n      function onResizePointerMove(event)\r\n      {\r\n         event.preventDefault();\r\n\r\n         if (!active) { return; }\r\n\r\n         foundryApp.setPosition({\r\n            width: position.width + (event.clientX - initialPosition.x),\r\n            height: position.height + (event.clientY - initialPosition.y)\r\n         });\r\n      }\r\n\r\n      /**\r\n       * Conclude the dragging behavior when the mouse is release, setting the final position and removing listeners\r\n       * @private\r\n       */\r\n      function onResizePointerUp(event)\r\n      {\r\n         event.preventDefault();\r\n\r\n         globalThis.removeEventListener(...handlers.resizeMove);\r\n         globalThis.removeEventListener(...handlers.resizeUp);\r\n\r\n         foundryApp._onResize(event);\r\n      }\r\n\r\n\r\n      return {\r\n         update: (booleanStore) =>  // eslint-disable-line no-shadow\r\n         {\r\n            if (booleanStore) { activateListeners(); }\r\n            else { removeListeners(); }\r\n         },\r\n\r\n         destroy: () => removeListeners()\r\n      };\r\n   }\r\n\r\n</script>\r\n\r\n<div class=\"window-resizable-handle\"\r\n     use:resizable={$storeResizable}\r\n     bind:this={elementResize}>\r\n   <i class=\"fas fa-arrows-alt-h\"></i>\r\n</div>\r\n","<script lang=\"ts\">\r\n   import {\r\n      getContext,\r\n      setContext,\r\n      SvelteComponent }          from 'svelte';\r\n\r\n   import TJSApplicationHeader   from './TJSApplicationHeader.svelte';\r\n   import TJSContainer           from '../TJSContainer.svelte';\r\n   import ResizableHandle        from './ResizableHandle.svelte';\r\n\r\n   import type {\r\n      ContextExternal,\r\n      HTMLElementGet }           from '@typhonjs-fvtt/svelte/component/core/types';\r\n\r\n   import {\r\n      s_DEFAULT_TRANSITION,\r\n      s_DEFAULT_TRANSITION_OPTIONS }   from '@typhonjs-fvtt/svelte/transition';\r\n\r\n   // Bound to the content and root elements. Can be used by parent components. SvelteApplication will also\r\n   // use 'elementRoot' to set the element of the Application. You can also provide `elementContent` and\r\n   // `elementTarget`. Please see SvelteApplication lifecycle documentation.\r\n   export let elementContent: HTMLElement;\r\n   export let elementRoot: HTMLElement;\r\n\r\n   // The children array can be specified by a parent via prop or is read below from the external context.\r\n   export let children: SvelteComponent[] | void = void 0\r\n\r\n   // If a parent component binds and sets `heightChanged` to true then it is bound to the content & root element\r\n   // `clientHeight`.\r\n   export let heightChanged: boolean = false;\r\n\r\n   // Store the initial `heightChanged` state. If it is truthy then `clientHeight` for the content & root elements\r\n   // are bound to `heightChanged` to signal to any parent component of any change to the client & root.\r\n   const bindHeightChanged: boolean = !!heightChanged;\r\n\r\n   setContext<HTMLElementGet>('getElementContent', () => elementContent);\r\n   setContext<HTMLElementGet>('getElementRoot', () => elementRoot);\r\n\r\n   const context = getContext<ContextExternal<{jqueryCloseAnimation: boolean}>>('external');\r\n\r\n   // Store Foundry Application reference.\r\n   const foundryApp = context.foundryApp;\r\n\r\n   // This component can host multiple children defined via props or in the TyphonJS SvelteData configuration object\r\n   // that are potentially mounted in the content area. If no children defined then this component mounts any slotted\r\n   // child.\r\n   const allChildren = Array.isArray(children) ? children :\r\n    typeof context === 'object' ? context.children : void 0;\r\n\r\n   // ---------------------------------------------------------------------------------------------------------------\r\n\r\n   // The following block is somewhat complex, but allows transition options to be updated reactively during\r\n   // runtime execution.\r\n\r\n   // Exports properties to set a transition w/ in / out options.\r\n   export let transition: Function = void 0;\r\n   export let inTransition: Function = s_DEFAULT_TRANSITION;\r\n   export let outTransition: Function = s_DEFAULT_TRANSITION;\r\n\r\n   // Exports properties to set options for any transitions.\r\n   export let transitionOptions: object = void 0;\r\n   export let inTransitionOptions: object = s_DEFAULT_TRANSITION_OPTIONS;\r\n   export let outTransitionOptions: object = s_DEFAULT_TRANSITION_OPTIONS;\r\n\r\n   // Tracks last transition state.\r\n   let oldTransition: Function = void 0;\r\n   let oldTransitionOptions: object = void 0\r\n\r\n   // Run this reactive block when the last transition state is not equal to the current state.\r\n   $: if (oldTransition !== transition)\r\n   {\r\n      // If transition is defined and not the default transition then set it to both in and out transition otherwise\r\n      // set the default transition to both in & out transitions.\r\n      const newTransition: Function = s_DEFAULT_TRANSITION !== transition && typeof transition === 'function' ?\r\n       transition : s_DEFAULT_TRANSITION;\r\n\r\n      inTransition = newTransition;\r\n      outTransition = newTransition;\r\n\r\n      oldTransition = newTransition;\r\n   }\r\n\r\n   // Run this reactive block when the last transition options state is not equal to the current options state.\r\n   $: if (oldTransitionOptions !== transitionOptions)\r\n   {\r\n      const newOptions: object = transitionOptions !== s_DEFAULT_TRANSITION_OPTIONS &&\r\n       typeof transitionOptions === 'object' ? transitionOptions : s_DEFAULT_TRANSITION_OPTIONS;\r\n\r\n      inTransitionOptions = newOptions;\r\n      outTransitionOptions = newOptions;\r\n\r\n      oldTransitionOptions = newOptions;\r\n   }\r\n\r\n   // Handle cases if inTransition is unset; assign noop default transition function.\r\n   $: if (typeof inTransition !== 'function') { inTransition = s_DEFAULT_TRANSITION; }\r\n\r\n   $:\r\n   {\r\n      // Handle cases if outTransition is unset; assign noop default transition function.\r\n      if (typeof outTransition !== 'function') { outTransition = s_DEFAULT_TRANSITION; }\r\n\r\n      // Set jquery close animation to either run or not when an out transition is changed.\r\n      if (foundryApp && typeof foundryApp?.options?.jqueryCloseAnimation === 'boolean')\r\n      {\r\n         foundryApp.options.jqueryCloseAnimation = outTransition === s_DEFAULT_TRANSITION;\r\n      }\r\n   }\r\n\r\n   // Handle cases if inTransitionOptions is unset; assign empty default transition options.\r\n   $: if (typeof inTransitionOptions !== 'object') { inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\r\n\r\n   // Handle cases if outTransitionOptions is unset; assign empty default transition options.\r\n   $: if (typeof outTransitionOptions !== 'object') { outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\r\n</script>\r\n\r\n<svelte:options accessors={true}/>\r\n\r\n{#if bindHeightChanged}\r\n   <div id={foundryApp.id}\r\n        class=\"app window-app {foundryApp.options.classes.join(' ')}\"\r\n        data-appid={foundryApp.appId}\r\n        bind:clientHeight={heightChanged}\r\n        bind:this={elementRoot}\r\n        in:inTransition={inTransitionOptions}\r\n        out:outTransition={outTransitionOptions}>\r\n      <TJSApplicationHeader />\r\n      <section class=window-content bind:this={elementContent} bind:clientHeight={heightChanged}>\r\n         {#if Array.isArray(allChildren)}\r\n            <TJSContainer children={allChildren} />\r\n         {:else}\r\n            <slot />\r\n         {/if}\r\n      </section>\r\n      <ResizableHandle />\r\n   </div>\r\n{:else}\r\n   <div id={foundryApp.id}\r\n        class=\"app window-app {foundryApp.options.classes.join(' ')}\"\r\n        data-appid={foundryApp.appId}\r\n        bind:this={elementRoot}\r\n        in:inTransition={inTransitionOptions}\r\n        out:outTransition={outTransitionOptions}>\r\n      <TJSApplicationHeader />\r\n      <section class=window-content bind:this={elementContent}>\r\n         {#if Array.isArray(allChildren)}\r\n            <TJSContainer children={allChildren} />\r\n         {:else}\r\n            <slot />\r\n         {/if}\r\n      </section>\r\n      <ResizableHandle />\r\n   </div>\r\n{/if}\r\n\r\n<style>\r\n   .window-app {\r\n      overflow: inherit;\r\n   }\r\n</style>\r\n","<script lang=\"ts\">\r\n    import {getContext, setContext, SvelteComponent} from 'svelte';\r\n\r\n   import TJSApplicationHeader          from './TJSApplicationHeader.svelte';\r\n   import TJSContainer                  from '../TJSContainer.svelte';\r\n   import ResizableHandle               from './ResizableHandle.svelte';\r\n\r\n   import {\r\n      s_DEFAULT_TRANSITION,\r\n      s_DEFAULT_TRANSITION_OPTIONS }    from '@typhonjs-fvtt/svelte/transition';\r\n\r\n   import type {\r\n       ContextExternal,\r\n       HTMLElementGet }                 from '@typhonjs-fvtt/svelte/component/core/types';\r\n\r\n   // Bound to the content and root elements. Can be used by parent components. SvelteApplication will also\r\n   // use 'elementRoot' to set the element of the Application. You can also provide `elementContent` and\r\n   // `elementTarget`. Please see SvelteApplication lifecycle documentation.\r\n   export let elementContent: HTMLElement;\r\n   export let elementRoot: HTMLElement;\r\n\r\n   // The children array can be specified by a parent via prop or is read below from the external context.\r\n   export let children: SvelteComponent[] | void = void 0\r\n\r\n   // If a parent component binds and sets `heightChanged` to true then it is bound to the content & root element\r\n   // `clientHeight`.\r\n   export let heightChanged: boolean = false;\r\n\r\n   // Store the initial `heightChanged` state. If it is truthy then `clientHeight` for the content & root elements\r\n   // are bound to `heightChanged` to signal to any parent component of any change to the client & root.\r\n   const bindHeightChanged: boolean = !!heightChanged;\r\n\r\n   setContext<HTMLElementGet>('getElementContent', () => elementContent);\r\n   setContext<HTMLElementGet>('getElementRoot', () => elementRoot);\r\n\r\n   const context = getContext<ContextExternal<{jqueryCloseAnimation: boolean}>>('external');\r\n\r\n   // Store Foundry Application reference.\r\n   const foundryApp = context.foundryApp;\r\n\r\n   // This component can host multiple children defined via props or in the TyphonJS SvelteData configuration object\r\n   // that are potentially mounted in the content area. If no children defined then this component mounts any slotted\r\n   // child.\r\n   const allChildren = Array.isArray(children) ? children :\r\n    typeof context === 'object' ? context.children : void 0;\r\n\r\n   // ---------------------------------------------------------------------------------------------------------------\r\n\r\n   // The following block is somewhat complex, but allows transition options to be updated reactively during\r\n   // runtime execution.\r\n\r\n   // Exports properties to set a transition w/ in / out options.\r\n   export let transition: Function = void 0;\r\n   export let inTransition: Function = s_DEFAULT_TRANSITION;\r\n   export let outTransition: Function = s_DEFAULT_TRANSITION;\r\n\r\n   // Exports properties to set options for any transitions.\r\n   export let transitionOptions: object = void 0;\r\n   export let inTransitionOptions: object = s_DEFAULT_TRANSITION_OPTIONS;\r\n   export let outTransitionOptions: object = s_DEFAULT_TRANSITION_OPTIONS;\r\n\r\n   // Tracks last transition state.\r\n   let oldTransition: Function = void 0;\r\n   let oldTransitionOptions: object = void 0\r\n\r\n   // Run this reactive block when the last transition state is not equal to the current state.\r\n   $: if (oldTransition !== transition)\r\n   {\r\n      // If transition is defined and not the default transition then set it to both in and out transition otherwise\r\n      // set the default transition to both in & out transitions.\r\n      const newTransition: Function = s_DEFAULT_TRANSITION !== transition && typeof transition === 'function' ?\r\n       transition : s_DEFAULT_TRANSITION;\r\n\r\n      inTransition = newTransition;\r\n      outTransition = newTransition;\r\n\r\n      oldTransition = newTransition;\r\n   }\r\n\r\n   // Run this reactive block when the last transition options state is not equal to the current options state.\r\n   $: if (oldTransitionOptions !== transitionOptions)\r\n   {\r\n      const newOptions: object = transitionOptions !== s_DEFAULT_TRANSITION_OPTIONS &&\r\n       typeof transitionOptions === 'object' ? transitionOptions : s_DEFAULT_TRANSITION_OPTIONS;\r\n\r\n      inTransitionOptions = newOptions;\r\n      outTransitionOptions = newOptions;\r\n\r\n      oldTransitionOptions = newOptions;\r\n   }\r\n\r\n   // Handle cases if inTransition is unset; assign noop default transition function.\r\n   $: if (typeof inTransition !== 'function') { inTransition = s_DEFAULT_TRANSITION; }\r\n\r\n   $:\r\n   {\r\n      // Handle cases if outTransition is unset; assign noop default transition function.\r\n      if (typeof outTransition !== 'function') { outTransition = s_DEFAULT_TRANSITION; }\r\n\r\n      // Set jquery close animation to either run or not when an out transition is changed.\r\n      if (foundryApp && typeof foundryApp?.options?.jqueryCloseAnimation === 'boolean')\r\n      {\r\n         foundryApp.options.jqueryCloseAnimation = outTransition === s_DEFAULT_TRANSITION;\r\n      }\r\n   }\r\n\r\n   // Handle cases if inTransitionOptions is unset; assign empty default transition options.\r\n   $: if (typeof inTransitionOptions !== 'object') { inTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\r\n\r\n   // Handle cases if outTransitionOptions is unset; assign empty default transition options.\r\n   $: if (typeof outTransitionOptions !== 'object') { outTransitionOptions = s_DEFAULT_TRANSITION_OPTIONS; }\r\n</script>\r\n\r\n<svelte:options accessors={true}/>\r\n\r\n{#if bindHeightChanged}\r\n   <div id={foundryApp.id}\r\n        class=\"tjs-app tjs-window-app {foundryApp.options.classes.join(' ')}\"\r\n        data-appid={foundryApp.appId}\r\n        bind:clientHeight={heightChanged}\r\n        bind:this={elementRoot}\r\n        in:inTransition={inTransitionOptions}\r\n        out:outTransition={outTransitionOptions}>\r\n       <TJSApplicationHeader />\r\n       <section class=window-content bind:this={elementContent} bind:clientHeight={heightChanged}>\r\n           {#if Array.isArray(allChildren)}\r\n               <TJSContainer children={allChildren} />\r\n           {:else}\r\n               <slot />\r\n           {/if}\r\n       </section>\r\n       <ResizableHandle />\r\n   </div>\r\n{:else}\r\n   <div id={foundryApp.id}\r\n        class=\"tjs-app tjs-window-app {foundryApp.options.classes.join(' ')}\"\r\n        data-appid={foundryApp.appId}\r\n        bind:this={elementRoot}\r\n        in:inTransition={inTransitionOptions}\r\n        out:outTransition={outTransitionOptions}>\r\n       <TJSApplicationHeader />\r\n       <section class=window-content bind:this={elementContent}>\r\n           {#if Array.isArray(allChildren)}\r\n               <TJSContainer children={allChildren} />\r\n           {:else}\r\n               <slot />\r\n           {/if}\r\n       </section>\r\n      <ResizableHandle />\r\n   </div>\r\n{/if}\r\n\r\n\r\n<style>\r\n  /**\r\n   * Defines styles that mimic a Foundry popout Application. `:global` is used to preserve the unused CSS in the\r\n   * template above. A primary benefit of a separate Application implementation is that the styles are not overridden\r\n   * by any given game system / mods that might effect the standard Foundry Application CSS. This allows separate\r\n   * and unique styles to be given to this component regardless of game system / module modifications.\r\n   */\r\n  :global(.tjs-app) {\r\n    max-height: 100%;\r\n    background: url(/ui/denim075.png) repeat;\r\n    border-radius: 5px;\r\n    box-shadow: 0 0 20px #000;\r\n    margin: 3px 0;\r\n    color: #f0f0e0;\r\n    position: absolute;\r\n  }\r\n\r\n  :global(.tjs-window-app) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: nowrap;\r\n    justify-content: flex-start;\r\n    padding: 0;\r\n    z-index: 99;\r\n  }\r\n\r\n  :global(.tjs-window-app .window-content) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: nowrap;\r\n    justify-content: flex-start;\r\n    padding: 8px;\r\n    color: #191813;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n  }\r\n\r\n  :global(.tjs-window-app .window-header) {\r\n    flex: 0 0 30px;\r\n    overflow: hidden;\r\n    padding: 0 8px;\r\n    line-height: 30px;\r\n    border-bottom: 1px solid #000;\r\n    pointer-events: auto;\r\n  }\r\n\r\n  :global(.tjs-window-app .window-header a) {\r\n    flex: none;\r\n    margin: 0 0 0 8px;\r\n  }\r\n\r\n  :global(.tjs-window-app .window-header h4) {\r\n    font-family: Signika, sans-serif;\r\n  }\r\n\r\n  :global(.tjs-window-app .window-header i[class^=fa]) {\r\n    margin-right: 3px;\r\n  }\r\n\r\n  :global(.tjs-window-app .window-header .window-title) {\r\n    margin: 0;\r\n    word-break: break-all;\r\n  }\r\n\r\n  :global(.tjs-window-app .window-resizable-handle) {\r\n    width: 20px;\r\n    height: 20px;\r\n    position: absolute;\r\n    bottom: -1px;\r\n    right: 0;\r\n    background: #444;\r\n    padding: 2px;\r\n    border: 1px solid #111;\r\n    border-radius: 4px 0 0 0;\r\n  }\r\n\r\n  :global(.tjs-window-app .window-resizable-handle i.fas) {\r\n    transform: rotate(45deg);\r\n  }\r\n\r\n  :global(.tjs-window-app.minimized .window-header) {\r\n     border: 1px solid #000;\r\n  }\r\n</style>\r\n","<script lang=\"ts\">\r\n   import { createEventDispatcher } from 'svelte';\r\n   import { current_component }     from 'svelte/internal';\r\n\r\n   import { localize }              from '@typhonjs-fvtt/svelte/helper';\r\n   import { slideFade }             from '@typhonjs-fvtt/svelte/transition';\r\n   import { outroAndDestroy }       from '@typhonjs-fvtt/svelte/util';\r\n\r\n   import type { MenuItemContext }  from '@typhonjs-fvtt/svelte/component/core/types';\r\n\r\n   export let id: string = '';\r\n   export let x: number = 0;\r\n   export let y: number = 0;\r\n   export let items: MenuItemContext[] = [];\r\n   export let zIndex: number = 10000;\r\n   export let transitionOptions: object = void 0;\r\n\r\n   // Bound to the nav element / menu.\r\n   let menuEl: HTMLElement;\r\n\r\n   // Store this component reference.\r\n   const local = current_component;\r\n\r\n   // Dispatches `close` event.\r\n   const dispatch = createEventDispatcher();\r\n\r\n   // Stores if this context menu is closed.\r\n   let closed: boolean = false;\r\n\r\n   /**\r\n    * Provides a custom animate callback allowing inspection of the element to change positioning styles based on the\r\n    * height / width of the element and `document.body`. This allows the context menu to expand up when the menu\r\n    * is outside the height bound of `document.body` and expand to the left if width is greater than `document.body`.\r\n    *\r\n    * @param {HTMLElement} node - nav element.\r\n    *\r\n    * @returns {object} Transition object.\r\n    */\r\n   function animate(node)\r\n   {\r\n      const expandUp: boolean = y + node.clientHeight > document.body.clientHeight\r\n      const expandLeft: boolean = x + node.clientWidth > document.body.clientWidth\r\n\r\n      node.style.top = expandUp ? null : `${y}px`;\r\n      node.style.bottom = expandUp ? `${document.body.clientHeight - y}px` : null;\r\n\r\n      node.style.left = expandLeft ? null : `${x}px`;\r\n      node.style.right = expandLeft ? `${document.body.clientWidth - x}px` : null;\r\n\r\n      return slideFade(node, transitionOptions);\r\n   }\r\n\r\n   /**\r\n    * Invokes a function on click of a menu item then fires the `close` event and automatically runs the outro\r\n    * transition and destroys the component.\r\n    *\r\n    * @param {function} callback - Function to invoke on click.\r\n    */\r\n   function onClick(callback)\r\n   {\r\n      if (typeof callback === 'function') { callback(); }\r\n\r\n      if (!closed)\r\n      {\r\n         dispatch('close');\r\n         closed = true;\r\n         outroAndDestroy(local);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Determines if a pointer pressed to the document body closes the context menu. If the click occurs outside the\r\n    * context menu then fire the `close` event and run the outro transition then destroy the component.\r\n    *\r\n    * @param {PointerEvent}   event - Pointer event from document body click.\r\n    */\r\n   async function onClose(event) // TODO TYPES: PointerEvent\r\n   {\r\n      // Early out if the pointer down is inside the menu element.\r\n      if (event.target === menuEl || menuEl.contains(event.target)) { return; }\r\n\r\n      // Early out if the event page X / Y is the same as this context menu.\r\n      if (Math.floor(event.pageX) === x && Math.floor(event.pageY) === y) { return; }\r\n\r\n      if (!closed)\r\n      {\r\n         dispatch('close');\r\n         closed = true;\r\n         outroAndDestroy(local);\r\n      }\r\n   }\r\n</script>\r\n<!-- bind to `document.body` to receive pointer down events to close the context menu. -->\r\n<svelte:body on:pointerdown={onClose}/>\r\n\r\n<nav id={id} class=tjs-context-menu transition:animate bind:this={menuEl} style=\"z-index: {zIndex}\">\r\n    <ol class=tjs-context-items>\r\n        {#each items as item}\r\n            <li class=tjs-context-item on:click={() => onClick(item.onclick)}><i class={item.icon}></i>{localize(item.label)}</li>\r\n        {/each}\r\n    </ol>\r\n</nav>\r\n\r\n<style>\r\n    .tjs-context-menu {\r\n        position: fixed;\r\n        width: fit-content;\r\n        font-size: 14px;\r\n        box-shadow: 0 0 10px #000;\r\n        height: max-content;\r\n        min-width: 150px;\r\n        max-width: 360px;\r\n        background: #23221d;\r\n        border: 1px solid #000;\r\n        border-radius: 5px;\r\n        color: #EEE;\r\n    }\r\n\r\n    .tjs-context-menu ol.tjs-context-items {\r\n        list-style: none;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    .tjs-context-menu li.tjs-context-item {\r\n        padding: 0 5px;\r\n        line-height: 32px;\r\n    }\r\n\r\n    .tjs-context-menu li.tjs-context-item:hover {\r\n        color: #FFF;\r\n        text-shadow: 0 0 4px red;\r\n    }\r\n\r\n    .tjs-context-menu li.tjs-context-item > i {\r\n        margin-right: 5px;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n   import { getContext }   from 'svelte';\r\n\r\n   import {\r\n      isSvelteComponent,\r\n      parseSvelteConfig }  from '@typhonjs-fvtt/svelte/util';\r\n\r\n   import type { TJSDialogData } from '@typhonjs-fvtt/svelte/component/core/types';\r\n\r\n   export let data = {} as TJSDialogData\r\n\r\n   data.title = 'boo';\r\n   data.content = 'blah';\r\n   data.modal = true;\r\n\r\n   let buttons;\r\n   let content;\r\n   let dialogComponent;\r\n   let dialogProps = {};\r\n\r\n   let foundryApp = getContext('external').foundryApp;\r\n\r\n   // If `data.buttons` is not an object then set an empty array otherwise reduce the button data.\r\n   $: buttons = typeof data.buttons !== 'object' ? [] : Object.keys(data.buttons).reduce((obj, key) =>\r\n   {\r\n      const b = data.buttons[key];\r\n      if (b.condition !== false)\r\n      {\r\n         // TODO TYPES: Not picking up the extension to Array in primitives.mjs.d.ts\r\n         // @ts-ignore\r\n         obj.push({\r\n            ...b,\r\n            id: key,\r\n            cssClass: [key, data.default === key ? 'default' : ''].filterJoin(' ')\r\n         })\r\n      }\r\n      return obj;\r\n   }, []);\r\n\r\n   $:\r\n   {\r\n      content = data.content;\r\n\r\n      try\r\n      {\r\n         if (isSvelteComponent(content))\r\n         {\r\n            dialogComponent = content;\r\n            dialogProps = {};\r\n         }\r\n         else if (typeof content === 'object')\r\n         {\r\n            const svelteConfig = parseSvelteConfig(content, foundryApp);\r\n            dialogComponent = svelteConfig.class;\r\n            dialogProps = svelteConfig.props ?? {};\r\n\r\n            // Check for any children parsed and added to the external context.\r\n            const children = svelteConfig?.context?.get('external')?.children;\r\n\r\n            // If so add to dialogProps.\r\n            if (Array.isArray(children))\r\n            {\r\n               // TODO TYPES: Haven't typed dialogProps\r\n               // @ts-ignore\r\n               dialogProps.children = children;\r\n            }\r\n         }\r\n         else\r\n         {\r\n            dialogComponent = void 0;\r\n            dialogProps = {};\r\n         }\r\n      }\r\n      catch (err)\r\n      {\r\n         dialogComponent = void 0;\r\n         dialogProps = {};\r\n\r\n         content = err.message;\r\n         console.error(err);\r\n      }\r\n   }\r\n\r\n   function onClick(button)\r\n   {\r\n      try\r\n      {\r\n         // Passing back the element is to keep with the existing Foundry API.\r\n         if (typeof button.callback === 'function')\r\n         {\r\n            button.callback(foundryApp.options.jQuery ? foundryApp.element : foundryApp.element[0]);\r\n         }\r\n\r\n         foundryApp.close();\r\n      }\r\n      catch(err)\r\n      {\r\n         // TODO TYPES: Either redeclare ui or perhaps new \"loose\" version of types.\r\n         // @ts-ignore\r\n         ui.notifications.error(err);\r\n         throw new Error(err);\r\n      }\r\n   }\r\n\r\n   function onKeydown(event)\r\n   {\r\n      switch (event.key)\r\n      {\r\n         case 'Escape':\r\n            return foundryApp.close();\r\n\r\n         case 'Enter':\r\n            onClick(data.buttons[data.default]);\r\n            break;\r\n      }\r\n   }\r\n</script>\r\n\r\n<svelte:body on:keydown|preventDefault|stopPropagation={onKeydown} />\r\n\r\n<div class=\"dialog-content\">\r\n   {#if typeof content === 'string'}\r\n      {@html content}\r\n   {:else if dialogComponent}\r\n      <svelte:component this={dialogComponent} {...dialogProps} />\r\n   {/if}\r\n</div>\r\n<div class=\"dialog-buttons\">\r\n   {#each buttons as button (button.id)}\r\n   <button class=\"dialog-button {button.cssClass}\" on:click={() => onClick(button)}>\r\n      {@html button.icon}\r\n      {@html button.label}\r\n   </button>\r\n   {/each}\r\n</div>\r\n\r\n<style>\r\n   div.dialog-buttons {\r\n      padding-top: 8px;\r\n   }\r\n</style>\r\n","<script lang=\"ts\">\r\n   import { getContext }               from 'svelte';\r\n   import { fade }                     from 'svelte/transition';\r\n\r\n   import ApplicationShell             from '../application/ApplicationShell.svelte';\r\n   import DialogContent                from './DialogContent.svelte';\r\n   import TJSGlassPane                 from '../TJSGlassPane.svelte';\r\n\r\n   import type { TJSDialogData }       from '@typhonjs-fvtt/svelte/component/core/types';\r\n\r\n   // Application shell contract.\r\n   export let elementRoot: HTMLElement;\r\n\r\n   // The dialog data.\r\n   export let data = {} as TJSDialogData;\r\n\r\n   const foundryApp = getContext('external').foundryApp;\r\n\r\n   const s_MODAL_TRANSITION = fade;\r\n   const s_MODAL_TRANSITION_OPTIONS = { duration: 200 };\r\n   const s_MODAL_BACKGROUND = '#50505080'\r\n\r\n   let modal = void 0;\r\n\r\n   // Stores props for the ApplicationShell.\r\n   const appProps = {\r\n      // Stores any transition functions.\r\n      transition: void 0,\r\n      inTransition: void 0,\r\n      outTransition: void 0,\r\n\r\n      // Stores properties to set for options for any transitions.\r\n      transitionOptions: void 0,\r\n      inTransitionOptions: void 0,\r\n      outTransitionOptions: void 0,\r\n   }\r\n\r\n   const modalProps = {\r\n      // Background CSS style string.\r\n      background: void 0,\r\n\r\n      // Stores any transition functions.\r\n      transition: void 0,\r\n      inTransition: void 0,\r\n      outTransition: void 0,\r\n\r\n      // Stores properties to set for options for any transitions.\r\n      transitionOptions: void 0,\r\n      inTransitionOptions: void 0,\r\n      outTransitionOptions: void 0,\r\n   }\r\n\r\n   let zIndex = void 0;\r\n\r\n   // Only set modal once on mount. You can't change between a modal an non-modal dialog during runtime.\r\n   if (modal === void 0) { modal = typeof data?.modal === 'boolean' ? data.modal : false; }\r\n\r\n   // Retrieve values from the DialogData object and also potentially set any SvelteApplication accessors.\r\n   // Explicit checks are performed against existing local variables as the only externally reactive variable is `data`.\r\n   // All of the checks below trigger when there are any external changes to the `data` prop.\r\n   // Prevent any unnecessary changing of local & `foundryApp` variables unless actual changes occur.\r\n\r\n   // Foundry App options --------------------------------------------------------------------------------------------\r\n\r\n   $: if (typeof data === 'object')\r\n   {\r\n      const newZIndex = Number.isInteger(data.zIndex) || data.zIndex === null ? data.zIndex :\r\n       modal ? Number.MAX_SAFE_INTEGER : Number.MAX_SAFE_INTEGER - 1\r\n      if (zIndex !== newZIndex) { zIndex = newZIndex; }\r\n\r\n      // Update the main foundry options when data changes. Perform explicit checks against existing data in `foundryApp`.\r\n      const newDraggable = data.draggable ?? true;\r\n      if (foundryApp.draggable !== newDraggable) { foundryApp.draggable = newDraggable; }\r\n\r\n      const newPopOut = data.popOut ?? true;\r\n      if (foundryApp.popOut !== newPopOut) { foundryApp.popOut = newPopOut; }\r\n\r\n      const newResizable = data.resizable ?? false;\r\n      if (foundryApp.resizable !== newResizable) { foundryApp.resizable = newResizable; }\r\n\r\n      // Note foundryApp.title from Application localizes `options.title`, so compare with `foundryApp.options.title`.\r\n      const newTitle = data.title ?? 'Dialog';\r\n      if (newTitle !== foundryApp?.options?.title) { foundryApp.title = newTitle; }\r\n\r\n      if (foundryApp.zIndex !== zIndex) { foundryApp.zIndex = zIndex; }\r\n   }\r\n\r\n   // ApplicationShell transition options ----------------------------------------------------------------------------\r\n\r\n   $: if (typeof data?.transition === 'object')\r\n   {\r\n      // Store data.transitions to shorten statements below.\r\n      const d = data.transition;\r\n\r\n      if (d?.transition !== appProps.transition) { appProps.transition = d.transition; }\r\n      if (d?.inTransition !== appProps.inTransition) { appProps.inTransition = d.inTransition; }\r\n      if (d?.outTransition !== appProps.outTransition) { appProps.outTransition = d.outTransition; }\r\n      if (d?.transitionOptions !== appProps.transitionOptions) { appProps.transitionOptions = d.transitionOptions; }\r\n\r\n      if (d?.inTransitionOptions !== appProps.inTransitionOptions)\r\n      {\r\n         appProps.inTransitionOptions = d.inTransitionOptions;\r\n      }\r\n\r\n      if (d?.outTransitionOptions !== appProps.outTransitionOptions)\r\n      {\r\n         appProps.outTransitionOptions = d.outTransitionOptions;\r\n      }\r\n   }\r\n\r\n   // Modal options --------------------------------------------------------------------------------------------------\r\n\r\n   $:\r\n   {\r\n      const newModalBackground = typeof data?.modalOptions?.background === 'string' ? data.modalOptions.background :\r\n       s_MODAL_BACKGROUND;\r\n\r\n      if (newModalBackground !== modalProps.background) { modalProps.background = newModalBackground; }\r\n   }\r\n\r\n   $: if (typeof data?.modalOptions?.transition === 'object')\r\n   {\r\n      // Store data.transitions to shorten statements below.\r\n      const d = data.modalOptions.transition;\r\n\r\n      if (d?.transition !== modalProps.transition)\r\n      {\r\n         modalProps.transition = typeof d?.transition === 'function' ? d.transition : s_MODAL_TRANSITION;\r\n      }\r\n\r\n      if (d?.inTransition !== modalProps.inTransition) { modalProps.inTransition = d.inTransition; }\r\n      if (d?.outTransition !== modalProps.outTransition) { modalProps.outTransition = d.outTransition; }\r\n\r\n      // Provide default transition options if not defined.\r\n      if (d?.transitionOptions !== modalProps.transitionOptions)\r\n      {\r\n         modalProps.transitionOptions = typeof d?.transitionOptions === 'object' ? d.transitionOptions :\r\n          s_MODAL_TRANSITION_OPTIONS;\r\n      }\r\n\r\n      if (d?.inTransitionOptions !== modalProps.inTransitionOptions)\r\n      {\r\n         modalProps.inTransitionOptions = d.inTransitionOptions;\r\n      }\r\n\r\n      if (d?.outTransitionOptions !== modalProps.outTransitionOptions)\r\n      {\r\n         modalProps.outTransitionOptions = d.outTransitionOptions;\r\n      }\r\n   }\r\n   else  // Provide a fallback / default glass pane transition when `data.modalOptions.transition` is not defined.\r\n   {\r\n      // TODO TYPES - Remove @ts-ignore\r\n\r\n      // @ts-ignore\r\n      const newModalTransition = typeof data?.modalOptions?.transition?.transition === 'function' ?\r\n       data.modalOptions.transition.transition : s_MODAL_TRANSITION;\r\n\r\n      if (newModalTransition !== modalProps.transition) { modalProps.transition = newModalTransition; }\r\n\r\n      // @ts-ignore\r\n      const newModalTransitionOptions = typeof data?.modalOptions?.transitionOptions === 'object' ?\r\n       data.modalOptions.transitionOptions : s_MODAL_TRANSITION_OPTIONS;\r\n\r\n      if (newModalTransitionOptions !== modalProps.transitionOptions)\r\n      {\r\n         modalProps.transitionOptions = newModalTransitionOptions;\r\n      }\r\n   }\r\n</script>\r\n\r\n<svelte:options accessors={true}/>\r\n\r\n{#if modal}\r\n   <TJSGlassPane id={foundryApp.id} stopPropagation={false} {...modalProps} {zIndex}>\r\n      <ApplicationShell bind:elementRoot {...appProps}>\r\n         <DialogContent {data} />\r\n      </ApplicationShell>\r\n   </TJSGlassPane>\r\n{:else}\r\n   <ApplicationShell bind:elementRoot {...appProps}>\r\n      <DialogContent {data} />\r\n   </ApplicationShell>\r\n{/if}\r\n"],"names":[],"mappings":"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"}